
HC_SR04-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000899c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08008b3c  08008b3c  00018b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d3c  08008d3c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008d3c  08008d3c  00018d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d44  08008d44  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d44  08008d44  00018d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d48  08008d48  00018d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a8c  200001e4  08008f30  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c70  08008f30  00021c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cedc  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bb0  00000000  00000000  0003d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e8  00000000  00000000  00040ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001558  00000000  00000000  00042388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aba5  00000000  00000000  000438e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bef  00000000  00000000  0005e485  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009501d  00000000  00000000  00073074  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006418  00000000  00000000  0010810c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b24 	.word	0x08008b24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08008b24 	.word	0x08008b24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <udelay_asm>:
#define LOOP_FREQ (SystemCoreClock/4000000)
#define SystemCoreClockInMHz (SystemCoreClock/1000000)

volatile uint32_t tim10_overflows = 0;

void udelay_asm (uint32_t useconds) {
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	   useconds *= LOOP_FREQ;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <udelay_asm+0x30>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <udelay_asm+0x34>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	0d1a      	lsrs	r2, r3, #20
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	fb02 f303 	mul.w	r3, r2, r3
 80005aa:	607b      	str	r3, [r7, #4]

		  asm volatile("   mov r0, %[useconds]    \n\t"
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4618      	mov	r0, r3
 80005b0:	3801      	subs	r0, #1
 80005b2:	d8fd      	bhi.n	80005b0 <udelay_asm+0x20>
					   "1: subs r0, #1            \n\t"
					   "   bhi 1b                 \n\t"
					   :
					   : [useconds] "r" (useconds)
					   : "r0");}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000000 	.word	0x20000000
 80005c4:	431bde83 	.word	0x431bde83

080005c8 <TIM10_reinit>:


//! Вкладених ф-цій в С/С++ немає! Лише за межами інших функцій можна створювати.
//! Саме 10-й таймер!
void TIM10_reinit()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Stop(&htim10);
 80005ce:	480e      	ldr	r0, [pc, #56]	; (8000608 <TIM10_reinit+0x40>)
 80005d0:	f004 f815 	bl	80045fe <HAL_TIM_Base_Stop>
  __HAL_TIM_SET_PRESCALER( &htim10, (SystemCoreClockInMHz-1) );
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <TIM10_reinit+0x44>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <TIM10_reinit+0x48>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	0c9a      	lsrs	r2, r3, #18
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <TIM10_reinit+0x40>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3a01      	subs	r2, #1
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_COUNTER( &htim10, 0 );
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <TIM10_reinit+0x40>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2200      	movs	r2, #0
 80005ee:	625a      	str	r2, [r3, #36]	; 0x24
  tim10_overflows = 0;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <TIM10_reinit+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef i = HAL_TIM_Base_Start_IT(&htim10);
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <TIM10_reinit+0x40>)
 80005f8:	f004 f82c 	bl	8004654 <HAL_TIM_Base_Start_IT>
 80005fc:	4603      	mov	r3, r0
 80005fe:	71fb      	strb	r3, [r7, #7]
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000268 	.word	0x20000268
 800060c:	20000000 	.word	0x20000000
 8000610:	431bde83 	.word	0x431bde83
 8000614:	20000200 	.word	0x20000200

08000618 <get_tim10_us>:

uint32_t get_tim10_us()
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 __HAL_TIM_DISABLE_IT(&htim10, TIM_IT_UPDATE); //! Дуже важливо!
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <get_tim10_us+0x4c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68da      	ldr	r2, [r3, #12]
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <get_tim10_us+0x4c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f022 0201 	bic.w	r2, r2, #1
 800062c:	60da      	str	r2, [r3, #12]
 //__disable_irq();
 uint32_t res = tim10_overflows * 10000 + __HAL_TIM_GET_COUNTER(&htim10);
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <get_tim10_us+0x50>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f242 7210 	movw	r2, #10000	; 0x2710
 8000636:	fb02 f203 	mul.w	r2, r2, r3
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <get_tim10_us+0x4c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000640:	4413      	add	r3, r2
 8000642:	607b      	str	r3, [r7, #4]
 //__enable_irq();
 __HAL_TIM_ENABLE_IT(&htim10, TIM_IT_UPDATE); //! Запусаємо саме 10-й таймер!
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <get_tim10_us+0x4c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	68da      	ldr	r2, [r3, #12]
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <get_tim10_us+0x4c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f042 0201 	orr.w	r2, r2, #1
 8000652:	60da      	str	r2, [r3, #12]
 return res;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000268 	.word	0x20000268
 8000668:	20000200 	.word	0x20000200

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b0a0      	sub	sp, #128	; 0x80
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fe7b 	bl	800136c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f989 	bl	800098c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 faf5 	bl	8000c68 <MX_GPIO_Init>
  MX_I2C1_Init();
 800067e:	f000 fa0d 	bl	8000a9c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000682:	f000 fa39 	bl	8000af8 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000686:	f000 fa65 	bl	8000b54 <MX_I2S3_Init>
  MX_SPI1_Init();
 800068a:	f000 fa93 	bl	8000bb4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800068e:	f007 f8fb 	bl	8007888 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 8000692:	f000 fac5 	bl	8000c20 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  TIM10_reinit(); //! Ви її зарано запускали!
 8000696:	f7ff ff97 	bl	80005c8 <TIM10_reinit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char xyz_coords[100];
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a0:	48af      	ldr	r0, [pc, #700]	; (8000960 <main+0x2f4>)
 80006a2:	f001 f9a3 	bl	80019ec <HAL_GPIO_WritePin>
  while (1)
	{
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	int t_state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	48ad      	ldr	r0, [pc, #692]	; (8000960 <main+0x2f4>)
 80006ac:	f001 f986 	bl	80019bc <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	677b      	str	r3, [r7, #116]	; 0x74
    while(t_state == GPIO_PIN_SET )
 80006b4:	e01b      	b.n	80006ee <main+0x82>
    {
      sprintf(xyz_coords, "Wrong state before triggering, Trig is high\n");
 80006b6:	463b      	mov	r3, r7
 80006b8:	4aaa      	ldr	r2, [pc, #680]	; (8000964 <main+0x2f8>)
 80006ba:	461c      	mov	r4, r3
 80006bc:	4615      	mov	r5, r2
 80006be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006ca:	c407      	stmia	r4!, {r0, r1, r2}
 80006cc:	7023      	strb	r3, [r4, #0]
	  CDC_Transmit_FS((uint8_t*)xyz_coords, (uint16_t)strlen(xyz_coords));
 80006ce:	463b      	mov	r3, r7
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd85 	bl	80001e0 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29b      	uxth	r3, r3
 80006da:	461a      	mov	r2, r3
 80006dc:	463b      	mov	r3, r7
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f007 f98f 	bl	8007a04 <CDC_Transmit_FS>
	  HAL_Delay(300);
 80006e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006ea:	f000 feb1 	bl	8001450 <HAL_Delay>
    while(t_state == GPIO_PIN_SET )
 80006ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d0e0      	beq.n	80006b6 <main+0x4a>
    }
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fa:	4899      	ldr	r0, [pc, #612]	; (8000960 <main+0x2f4>)
 80006fc:	f001 f976 	bl	80019ec <HAL_GPIO_WritePin>
    if ( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) != GPIO_PIN_SET )
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	4896      	ldr	r0, [pc, #600]	; (8000960 <main+0x2f4>)
 8000706:	f001 f959 	bl	80019bc <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d022      	beq.n	8000756 <main+0xea>
    {
      sprintf(xyz_coords, "Line Trig do not went high while triggering.\n");
 8000710:	463b      	mov	r3, r7
 8000712:	4a95      	ldr	r2, [pc, #596]	; (8000968 <main+0x2fc>)
 8000714:	461c      	mov	r4, r3
 8000716:	4615      	mov	r5, r2
 8000718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000720:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000724:	c407      	stmia	r4!, {r0, r1, r2}
 8000726:	8023      	strh	r3, [r4, #0]
      CDC_Transmit_FS((uint8_t*)xyz_coords, (uint16_t)strlen(xyz_coords));
 8000728:	463b      	mov	r3, r7
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd58 	bl	80001e0 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29b      	uxth	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	463b      	mov	r3, r7
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f007 f962 	bl	8007a04 <CDC_Transmit_FS>
      HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	4886      	ldr	r0, [pc, #536]	; (8000960 <main+0x2f4>)
 8000748:	f001 f950 	bl	80019ec <HAL_GPIO_WritePin>
      HAL_Delay(300);
 800074c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000750:	f000 fe7e 	bl	8001450 <HAL_Delay>
      continue;
 8000754:	e103      	b.n	800095e <main+0x2f2>
    }
	udelay_asm(16);
 8000756:	2010      	movs	r0, #16
 8000758:	f7ff ff1a 	bl	8000590 <udelay_asm>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	487f      	ldr	r0, [pc, #508]	; (8000960 <main+0x2f4>)
 8000764:	f001 f942 	bl	80019ec <HAL_GPIO_WritePin>
    if ( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) != GPIO_PIN_RESET )
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	487c      	ldr	r0, [pc, #496]	; (8000960 <main+0x2f4>)
 800076e:	f001 f925 	bl	80019bc <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d022      	beq.n	80007be <main+0x152>
	{
      sprintf(xyz_coords, "Line Trig do not went low after triggering.\n");
 8000778:	463b      	mov	r3, r7
 800077a:	4a7c      	ldr	r2, [pc, #496]	; (800096c <main+0x300>)
 800077c:	461c      	mov	r4, r3
 800077e:	4615      	mov	r5, r2
 8000780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000788:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800078c:	c407      	stmia	r4!, {r0, r1, r2}
 800078e:	7023      	strb	r3, [r4, #0]
      CDC_Transmit_FS((uint8_t*)xyz_coords, (uint16_t)strlen(xyz_coords));
 8000790:	463b      	mov	r3, r7
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fd24 	bl	80001e0 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29b      	uxth	r3, r3
 800079c:	461a      	mov	r2, r3
 800079e:	463b      	mov	r3, r7
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 f92e 	bl	8007a04 <CDC_Transmit_FS>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ae:	486c      	ldr	r0, [pc, #432]	; (8000960 <main+0x2f4>)
 80007b0:	f001 f91c 	bl	80019ec <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 80007b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007b8:	f000 fe4a 	bl	8001450 <HAL_Delay>
	  continue;
 80007bc:	e0cf      	b.n	800095e <main+0x2f2>
	}
    if ( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9) == GPIO_PIN_SET )
 80007be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c2:	4867      	ldr	r0, [pc, #412]	; (8000960 <main+0x2f4>)
 80007c4:	f001 f8fa 	bl	80019bc <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d11a      	bne.n	8000804 <main+0x198>
    {
	  sprintf(xyz_coords, "Line ECHO is high too early.\n");
 80007ce:	463b      	mov	r3, r7
 80007d0:	4a67      	ldr	r2, [pc, #412]	; (8000970 <main+0x304>)
 80007d2:	461c      	mov	r4, r3
 80007d4:	4615      	mov	r5, r2
 80007d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007de:	c407      	stmia	r4!, {r0, r1, r2}
 80007e0:	8023      	strh	r3, [r4, #0]
	  CDC_Transmit_FS((uint8_t*)xyz_coords, (uint16_t)strlen(xyz_coords));
 80007e2:	463b      	mov	r3, r7
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fcfb 	bl	80001e0 <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	463b      	mov	r3, r7
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f007 f905 	bl	8007a04 <CDC_Transmit_FS>
	  HAL_Delay(300);
 80007fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007fe:	f000 fe27 	bl	8001450 <HAL_Delay>
	  continue;
 8000802:	e0ac      	b.n	800095e <main+0x2f2>
    }

    uint32_t watchdog_begin = get_tim10_us();
 8000804:	f7ff ff08 	bl	8000618 <get_tim10_us>
 8000808:	6738      	str	r0, [r7, #112]	; 0x70
    int didnt_had_1_at_echo = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	67fb      	str	r3, [r7, #124]	; 0x7c

    while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9) == GPIO_PIN_RESET )
 800080e:	e00a      	b.n	8000826 <main+0x1ba>
    {
	  if( get_tim10_us() - watchdog_begin > 500000 )
 8000810:	f7ff ff02 	bl	8000618 <get_tim10_us>
 8000814:	4602      	mov	r2, r0
 8000816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	4a56      	ldr	r2, [pc, #344]	; (8000974 <main+0x308>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d902      	bls.n	8000826 <main+0x1ba>
	{
	  didnt_had_1_at_echo = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	67fb      	str	r3, [r7, #124]	; 0x7c
	  break;
 8000824:	e007      	b.n	8000836 <main+0x1ca>
    while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9) == GPIO_PIN_RESET )
 8000826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082a:	484d      	ldr	r0, [pc, #308]	; (8000960 <main+0x2f4>)
 800082c:	f001 f8c6 	bl	80019bc <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0ec      	beq.n	8000810 <main+0x1a4>
	}
    }
    if(didnt_had_1_at_echo)
 8000836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000838:	2b00      	cmp	r3, #0
 800083a:	d01f      	beq.n	800087c <main+0x210>
    {
      sprintf(xyz_coords, "Line ECHO didn't go high for a long time.\n");
 800083c:	463b      	mov	r3, r7
 800083e:	4a4e      	ldr	r2, [pc, #312]	; (8000978 <main+0x30c>)
 8000840:	461c      	mov	r4, r3
 8000842:	4615      	mov	r5, r2
 8000844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000850:	c403      	stmia	r4!, {r0, r1}
 8000852:	8022      	strh	r2, [r4, #0]
 8000854:	3402      	adds	r4, #2
 8000856:	0c13      	lsrs	r3, r2, #16
 8000858:	7023      	strb	r3, [r4, #0]
      CDC_Transmit_FS((uint8_t*)xyz_coords, (uint16_t)strlen(xyz_coords));
 800085a:	463b      	mov	r3, r7
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fcbf 	bl	80001e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29b      	uxth	r3, r3
 8000866:	461a      	mov	r2, r3
 8000868:	463b      	mov	r3, r7
 800086a:	4611      	mov	r1, r2
 800086c:	4618      	mov	r0, r3
 800086e:	f007 f8c9 	bl	8007a04 <CDC_Transmit_FS>
	  HAL_Delay(300);
 8000872:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000876:	f000 fdeb 	bl	8001450 <HAL_Delay>
	  continue;
 800087a:	e070      	b.n	800095e <main+0x2f2>
    }

    uint32_t before = get_tim10_us();
 800087c:	f7ff fecc 	bl	8000618 <get_tim10_us>
 8000880:	66f8      	str	r0, [r7, #108]	; 0x6c
    int didnt_had_0_at_echo = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	67bb      	str	r3, [r7, #120]	; 0x78
	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9) == GPIO_PIN_SET )
 8000886:	e00a      	b.n	800089e <main+0x232>
	{
	  if( get_tim10_us() - watchdog_begin > 500000 )
 8000888:	f7ff fec6 	bl	8000618 <get_tim10_us>
 800088c:	4602      	mov	r2, r0
 800088e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	4a38      	ldr	r2, [pc, #224]	; (8000974 <main+0x308>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d902      	bls.n	800089e <main+0x232>
	  {
		didnt_had_0_at_echo = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	67bb      	str	r3, [r7, #120]	; 0x78
		break;
 800089c:	e007      	b.n	80008ae <main+0x242>
	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9) == GPIO_PIN_SET )
 800089e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a2:	482f      	ldr	r0, [pc, #188]	; (8000960 <main+0x2f4>)
 80008a4:	f001 f88a 	bl	80019bc <HAL_GPIO_ReadPin>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d0ec      	beq.n	8000888 <main+0x21c>
	  }
	}
	if(didnt_had_0_at_echo)
 80008ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d018      	beq.n	80008e6 <main+0x27a>
	{
	  sprintf(xyz_coords, "Line ECHO didn't go low after echoing pulse stared for a long time.\n");
 80008b4:	463b      	mov	r3, r7
 80008b6:	4a31      	ldr	r2, [pc, #196]	; (800097c <main+0x310>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	4611      	mov	r1, r2
 80008bc:	2345      	movs	r3, #69	; 0x45
 80008be:	461a      	mov	r2, r3
 80008c0:	f007 fd20 	bl	8008304 <memcpy>
	  CDC_Transmit_FS((uint8_t*)xyz_coords, (uint16_t)strlen(xyz_coords));
 80008c4:	463b      	mov	r3, r7
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fc8a 	bl	80001e0 <strlen>
 80008cc:	4603      	mov	r3, r0
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	463b      	mov	r3, r7
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f007 f894 	bl	8007a04 <CDC_Transmit_FS>
	  HAL_Delay(300);
 80008dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008e0:	f000 fdb6 	bl	8001450 <HAL_Delay>
	  continue;
 80008e4:	e03b      	b.n	800095e <main+0x2f2>
	}
	uint32_t pulse_time = get_tim10_us()-before;
 80008e6:	f7ff fe97 	bl	8000618 <get_tim10_us>
 80008ea:	4602      	mov	r2, r0
 80008ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t distance = pulse_time/58;
 80008f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008f4:	4a22      	ldr	r2, [pc, #136]	; (8000980 <main+0x314>)
 80008f6:	fba2 2303 	umull	r2, r3, r2, r3
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	667b      	str	r3, [r7, #100]	; 0x64
	sprintf(xyz_coords, "Time: %lu us, distance: %lu cm\n",
 80008fe:	4638      	mov	r0, r7
 8000900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000902:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000904:	491f      	ldr	r1, [pc, #124]	; (8000984 <main+0x318>)
 8000906:	f007 fdc9 	bl	800849c <siprintf>
	   pulse_time,
	   distance
	   );
	CDC_Transmit_FS((uint8_t*)xyz_coords, (uint16_t)strlen(xyz_coords));
 800090a:	463b      	mov	r3, r7
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc67 	bl	80001e0 <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	b29b      	uxth	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	463b      	mov	r3, r7
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f007 f871 	bl	8007a04 <CDC_Transmit_FS>
	if( distance > 500 )
 8000922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000924:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000928:	f67f aebd 	bls.w	80006a6 <main+0x3a>
	{
	  sprintf(xyz_coords, "\tToo far -- possibly no echo at all.");
 800092c:	463b      	mov	r3, r7
 800092e:	4a16      	ldr	r2, [pc, #88]	; (8000988 <main+0x31c>)
 8000930:	461c      	mov	r4, r3
 8000932:	4615      	mov	r5, r2
 8000934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000940:	6020      	str	r0, [r4, #0]
 8000942:	3404      	adds	r4, #4
 8000944:	7021      	strb	r1, [r4, #0]
	  CDC_Transmit_FS((uint8_t*)xyz_coords, (uint16_t)strlen(xyz_coords));
 8000946:	463b      	mov	r3, r7
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fc49 	bl	80001e0 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29b      	uxth	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	463b      	mov	r3, r7
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f007 f853 	bl	8007a04 <CDC_Transmit_FS>
	{
 800095e:	e6a2      	b.n	80006a6 <main+0x3a>
 8000960:	40020c00 	.word	0x40020c00
 8000964:	08008b3c 	.word	0x08008b3c
 8000968:	08008b6c 	.word	0x08008b6c
 800096c:	08008b9c 	.word	0x08008b9c
 8000970:	08008bcc 	.word	0x08008bcc
 8000974:	0007a120 	.word	0x0007a120
 8000978:	08008bec 	.word	0x08008bec
 800097c:	08008c18 	.word	0x08008c18
 8000980:	8d3dcb09 	.word	0x8d3dcb09
 8000984:	08008c60 	.word	0x08008c60
 8000988:	08008c80 	.word	0x08008c80

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09a      	sub	sp, #104	; 0x68
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fcbd 	bl	800831a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
 80009c0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <SystemClock_Config+0x108>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <SystemClock_Config+0x108>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <SystemClock_Config+0x108>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <SystemClock_Config+0x10c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a2c      	ldr	r2, [pc, #176]	; (8000a98 <SystemClock_Config+0x10c>)
 80009e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <SystemClock_Config+0x10c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009fa:	2301      	movs	r3, #1
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a04:	2302      	movs	r3, #2
 8000a06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a12:	23c0      	movs	r3, #192	; 0xc0
 8000a14:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a16:	2304      	movs	r3, #4
 8000a18:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 ff58 	bl	80038d8 <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a2e:	f000 fa2f 	bl	8000e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	230f      	movs	r3, #15
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 f9b2 	bl	8003db8 <HAL_RCC_ClockConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a5a:	f000 fa19 	bl	8000e90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000a62:	23c8      	movs	r3, #200	; 0xc8
 8000a64:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000a66:	2305      	movs	r3, #5
 8000a68:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 fbe6 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000a7e:	f000 fa07 	bl	8000e90 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2001      	movs	r0, #1
 8000a88:	f003 fa7c 	bl	8003f84 <HAL_RCC_MCOConfig>
}
 8000a8c:	bf00      	nop
 8000a8e:	3768      	adds	r7, #104	; 0x68
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aa2:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <MX_I2C1_Init+0x54>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aa8:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_I2C1_Init+0x58>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ada:	f000 ffa1 	bl	8001a20 <HAL_I2C_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae4:	f000 f9d4 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000214 	.word	0x20000214
 8000af0:	40005400 	.word	0x40005400
 8000af4:	000186a0 	.word	0x000186a0

08000af8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_I2S2_Init+0x50>)
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <MX_I2S2_Init+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_I2S2_Init+0x50>)
 8000b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b08:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_I2S2_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MX_I2S2_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_I2S2_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_I2S2_Init+0x50>)
 8000b1e:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <MX_I2S2_Init+0x58>)
 8000b20:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_I2S2_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_I2S2_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_I2S2_Init+0x50>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_I2S2_Init+0x50>)
 8000b36:	f001 f8ab 	bl	8001c90 <HAL_I2S_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000b40:	f000 f9a6 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000300 	.word	0x20000300
 8000b4c:	40003800 	.word	0x40003800
 8000b50:	00017700 	.word	0x00017700

08000b54 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b5a:	4a14      	ldr	r2, [pc, #80]	; (8000bac <MX_I2S3_Init+0x58>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b64:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b78:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <MX_I2S3_Init+0x5c>)
 8000b7e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b94:	f001 f87c 	bl	8001c90 <HAL_I2S_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b9e:	f000 f977 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000348 	.word	0x20000348
 8000bac:	40003c00 	.word	0x40003c00
 8000bb0:	00017700 	.word	0x00017700

08000bb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_SPI1_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c06:	f003 fc6b 	bl	80044e0 <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c10:	f000 f93e 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200002a8 	.word	0x200002a8
 8000c1c:	40013000 	.word	0x40013000

08000c20 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_TIM10_Init+0x40>)
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <MX_TIM10_Init+0x44>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 63;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <MX_TIM10_Init+0x40>)
 8000c2c:	223f      	movs	r2, #63	; 0x3f
 8000c2e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_TIM10_Init+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <MX_TIM10_Init+0x40>)
 8000c38:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c3c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_TIM10_Init+0x40>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_TIM10_Init+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_TIM10_Init+0x40>)
 8000c4c:	f003 fcac 	bl	80045a8 <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000c56:	f000 f91b 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000268 	.word	0x20000268
 8000c64:	40014400 	.word	0x40014400

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	; 0x30
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	4b71      	ldr	r3, [pc, #452]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a70      	ldr	r2, [pc, #448]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000c88:	f043 0310 	orr.w	r3, r3, #16
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b6e      	ldr	r3, [pc, #440]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	4b6a      	ldr	r3, [pc, #424]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a69      	ldr	r2, [pc, #420]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b67      	ldr	r3, [pc, #412]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b63      	ldr	r3, [pc, #396]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a62      	ldr	r2, [pc, #392]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b60      	ldr	r3, [pc, #384]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b5c      	ldr	r3, [pc, #368]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a5b      	ldr	r2, [pc, #364]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b59      	ldr	r3, [pc, #356]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a54      	ldr	r2, [pc, #336]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b52      	ldr	r3, [pc, #328]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b4e      	ldr	r3, [pc, #312]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a4d      	ldr	r2, [pc, #308]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <MX_GPIO_Init+0x1e0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2108      	movs	r1, #8
 8000d2a:	4848      	ldr	r0, [pc, #288]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d2c:	f000 fe5e 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	4846      	ldr	r0, [pc, #280]	; (8000e50 <MX_GPIO_Init+0x1e8>)
 8000d36:	f000 fe59 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TRIG_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f24f 1110 	movw	r1, #61712	; 0xf110
 8000d40:	4844      	ldr	r0, [pc, #272]	; (8000e54 <MX_GPIO_Init+0x1ec>)
 8000d42:	f000 fe53 	bl	80019ec <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000d46:	2304      	movs	r3, #4
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	483c      	ldr	r0, [pc, #240]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d5a:	f000 fcad 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4835      	ldr	r0, [pc, #212]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d76:	f000 fc9f 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000d7a:	2332      	movs	r3, #50	; 0x32
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d7e:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <MX_GPIO_Init+0x1f0>)
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	482f      	ldr	r0, [pc, #188]	; (8000e4c <MX_GPIO_Init+0x1e4>)
 8000d8e:	f000 fc93 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d92:	2301      	movs	r3, #1
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4829      	ldr	r0, [pc, #164]	; (8000e50 <MX_GPIO_Init+0x1e8>)
 8000daa:	f000 fc85 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <MX_GPIO_Init+0x1f0>)
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4826      	ldr	r0, [pc, #152]	; (8000e5c <MX_GPIO_Init+0x1f4>)
 8000dc2:	f000 fc79 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_GPIO_Init+0x1f4>)
 8000de2:	f000 fc69 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000de6:	f24f 1310 	movw	r3, #61712	; 0xf110
 8000dea:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4815      	ldr	r0, [pc, #84]	; (8000e54 <MX_GPIO_Init+0x1ec>)
 8000e00:	f000 fc5a 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|OTG_FS_OverCurrent_Pin;
 8000e04:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_GPIO_Init+0x1ec>)
 8000e1a:	f000 fc4d 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_GPIO_Init+0x1e8>)
 8000e3c:	f000 fc3c 	bl	80016b8 <HAL_GPIO_Init>

}
 8000e40:	bf00      	nop
 8000e42:	3730      	adds	r7, #48	; 0x30
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	10120000 	.word	0x10120000
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM10 )
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d104      	bne.n	8000e7c <HAL_TIM_PeriodElapsedCallback+0x1c>
		tim10_overflows++;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40014400 	.word	0x40014400
 8000e8c:	20000200 	.word	0x20000200

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ede:	2007      	movs	r0, #7
 8000ee0:	f000 fba8 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_I2C_MspInit+0x84>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d12c      	bne.n	8000f6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f40:	2304      	movs	r3, #4
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <HAL_I2C_MspInit+0x8c>)
 8000f4c:	f000 fbb4 	bl	80016b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_I2C_MspInit+0x88>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40005400 	.word	0x40005400
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400

08000f80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	; 0x38
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a59      	ldr	r2, [pc, #356]	; (8001104 <HAL_I2S_MspInit+0x184>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d15b      	bne.n	800105a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
 8000fa6:	4b58      	ldr	r3, [pc, #352]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a57      	ldr	r2, [pc, #348]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b55      	ldr	r3, [pc, #340]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	623b      	str	r3, [r7, #32]
 8000fbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	4b51      	ldr	r3, [pc, #324]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a50      	ldr	r2, [pc, #320]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b4e      	ldr	r3, [pc, #312]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a49      	ldr	r2, [pc, #292]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b47      	ldr	r3, [pc, #284]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001006:	2306      	movs	r3, #6
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	483e      	ldr	r0, [pc, #248]	; (800110c <HAL_I2S_MspInit+0x18c>)
 8001012:	f000 fb51 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001016:	2308      	movs	r3, #8
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001026:	2305      	movs	r3, #5
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102e:	4619      	mov	r1, r3
 8001030:	4836      	ldr	r0, [pc, #216]	; (800110c <HAL_I2S_MspInit+0x18c>)
 8001032:	f000 fb41 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001036:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001048:	2305      	movs	r3, #5
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	482f      	ldr	r0, [pc, #188]	; (8001110 <HAL_I2S_MspInit+0x190>)
 8001054:	f000 fb30 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001058:	e04f      	b.n	80010fa <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <HAL_I2S_MspInit+0x194>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d14a      	bne.n	80010fa <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <HAL_I2S_MspInit+0x188>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <HAL_I2S_MspInit+0x188>)
 800106e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <HAL_I2S_MspInit+0x188>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6313      	str	r3, [r2, #48]	; 0x30
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_I2S_MspInit+0x188>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_I2S_MspInit+0x188>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	4a18      	ldr	r2, [pc, #96]	; (8001108 <HAL_I2S_MspInit+0x188>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6313      	str	r3, [r2, #48]	; 0x30
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_I2S_MspInit+0x188>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010b8:	2310      	movs	r3, #16
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010c8:	2306      	movs	r3, #6
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4811      	ldr	r0, [pc, #68]	; (8001118 <HAL_I2S_MspInit+0x198>)
 80010d4:	f000 faf0 	bl	80016b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ea:	2306      	movs	r3, #6
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_I2S_MspInit+0x18c>)
 80010f6:	f000 fadf 	bl	80016b8 <HAL_GPIO_Init>
}
 80010fa:	bf00      	nop
 80010fc:	3738      	adds	r7, #56	; 0x38
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40003800 	.word	0x40003800
 8001108:	40023800 	.word	0x40023800
 800110c:	40020800 	.word	0x40020800
 8001110:	40020400 	.word	0x40020400
 8001114:	40003c00 	.word	0x40003c00
 8001118:	40020000 	.word	0x40020000

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_SPI_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12b      	bne.n	8001196 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001176:	23e0      	movs	r3, #224	; 0xe0
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001186:	2305      	movs	r3, #5
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001192:	f000 fa91 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40013000 	.word	0x40013000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_TIM_Base_MspInit+0x48>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d115      	bne.n	80011ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_TIM_Base_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <HAL_TIM_Base_MspInit+0x4c>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_TIM_Base_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2019      	movs	r0, #25
 80011e0:	f000 fa33 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011e4:	2019      	movs	r0, #25
 80011e6:	f000 fa4c 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40014400 	.word	0x40014400
 80011f8:	40023800 	.word	0x40023800

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f000 f8de 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800125e:	f003 fa1d 	bl	800469c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000268 	.word	0x20000268

0800126c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <OTG_FS_IRQHandler+0x10>)
 8001272:	f001 fafd 	bl	8002870 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20001864 	.word	0x20001864

08001280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <_sbrk+0x5c>)
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <_sbrk+0x60>)
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <_sbrk+0x64>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <_sbrk+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d207      	bcs.n	80012c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b0:	f006 ffee 	bl	8008290 <__errno>
 80012b4:	4602      	mov	r2, r0
 80012b6:	230c      	movs	r3, #12
 80012b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	e009      	b.n	80012d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <_sbrk+0x64>)
 80012d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d2:	68fb      	ldr	r3, [r7, #12]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20020000 	.word	0x20020000
 80012e0:	00000400 	.word	0x00000400
 80012e4:	20000204 	.word	0x20000204
 80012e8:	20001c70 	.word	0x20001c70

080012ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <SystemInit+0x28>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <SystemInit+0x28>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SystemInit+0x28>)
 8001302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001306:	609a      	str	r2, [r3, #8]
#endif
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001350 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800131c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800131e:	e003      	b.n	8001328 <LoopCopyDataInit>

08001320 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001322:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001324:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001326:	3104      	adds	r1, #4

08001328 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800132c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800132e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001330:	d3f6      	bcc.n	8001320 <CopyDataInit>
  ldr  r2, =_sbss
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001334:	e002      	b.n	800133c <LoopFillZerobss>

08001336 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001336:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001338:	f842 3b04 	str.w	r3, [r2], #4

0800133c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800133e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001340:	d3f9      	bcc.n	8001336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001342:	f7ff ffd3 	bl	80012ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f006 ffa9 	bl	800829c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134a:	f7ff f98f 	bl	800066c <main>
  bx  lr    
 800134e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001350:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001354:	08008d4c 	.word	0x08008d4c
  ldr  r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800135c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001360:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001364:	20001c70 	.word	0x20001c70

08001368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <HAL_Init+0x40>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_Init+0x40>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_Init+0x40>)
 800138e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001394:	2003      	movs	r0, #3
 8001396:	f000 f94d 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f808 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a0:	f7ff fd7e 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023c00 	.word	0x40023c00

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x54>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_InitTick+0x58>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f965 	bl	800169e <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e00e      	b.n	80013fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d80a      	bhi.n	80013fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f000 f92d 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <HAL_InitTick+0x5c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000000 	.word	0x20000000
 8001408:	20000008 	.word	0x20000008
 800140c:	20000004 	.word	0x20000004

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008
 8001434:	20000390 	.word	0x20000390

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000390 	.word	0x20000390

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_Delay+0x40>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000008 	.word	0x20000008

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff29 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff3e 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff31 	bl	80014f8 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e159      	b.n	8001988 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8148 	bne.w	8001982 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d00b      	beq.n	8001712 <HAL_GPIO_Init+0x5a>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001706:	2b11      	cmp	r3, #17
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b12      	cmp	r3, #18
 8001710:	d130      	bne.n	8001774 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 0201 	and.w	r2, r3, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0xfc>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b12      	cmp	r3, #18
 80017b2:	d123      	bne.n	80017fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	69b9      	ldr	r1, [r7, #24]
 80017f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0203 	and.w	r2, r3, #3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80a2 	beq.w	8001982 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_GPIO_Init+0x2e4>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_GPIO_Init+0x2e4>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_GPIO_Init+0x2e4>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800185a:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <HAL_GPIO_Init+0x2e8>)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_GPIO_Init+0x2ec>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x202>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a47      	ldr	r2, [pc, #284]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x1fe>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a46      	ldr	r2, [pc, #280]	; (80019ac <HAL_GPIO_Init+0x2f4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x1fa>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a45      	ldr	r2, [pc, #276]	; (80019b0 <HAL_GPIO_Init+0x2f8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x1f6>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a44      	ldr	r2, [pc, #272]	; (80019b4 <HAL_GPIO_Init+0x2fc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x1f2>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e008      	b.n	80018bc <HAL_GPIO_Init+0x204>
 80018aa:	2307      	movs	r3, #7
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x204>
 80018ae:	2303      	movs	r3, #3
 80018b0:	e004      	b.n	80018bc <HAL_GPIO_Init+0x204>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_Init+0x204>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_GPIO_Init+0x204>
 80018ba:	2300      	movs	r3, #0
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	f002 0203 	and.w	r2, r2, #3
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	4093      	lsls	r3, r2
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018cc:	4934      	ldr	r1, [pc, #208]	; (80019a0 <HAL_GPIO_Init+0x2e8>)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018da:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_GPIO_Init+0x300>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018fe:	4a2e      	ldr	r2, [pc, #184]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001928:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <HAL_GPIO_Init+0x300>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_GPIO_Init+0x300>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_GPIO_Init+0x300>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3301      	adds	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	f67f aea2 	bls.w	80016d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001990:	bf00      	nop
 8001992:	3724      	adds	r7, #36	; 0x24
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40023800 	.word	0x40023800
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40013c00 	.word	0x40013c00

080019bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e001      	b.n	80019de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a08:	e003      	b.n	8001a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e11f      	b.n	8001c72 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fa52 	bl	8000ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2224      	movs	r2, #36	; 0x24
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a84:	f002 fbca 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 8001a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a7b      	ldr	r2, [pc, #492]	; (8001c7c <HAL_I2C_Init+0x25c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d807      	bhi.n	8001aa4 <HAL_I2C_Init+0x84>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a7a      	ldr	r2, [pc, #488]	; (8001c80 <HAL_I2C_Init+0x260>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	bf94      	ite	ls
 8001a9c:	2301      	movls	r3, #1
 8001a9e:	2300      	movhi	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e006      	b.n	8001ab2 <HAL_I2C_Init+0x92>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a77      	ldr	r2, [pc, #476]	; (8001c84 <HAL_I2C_Init+0x264>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0db      	b.n	8001c72 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4a72      	ldr	r2, [pc, #456]	; (8001c88 <HAL_I2C_Init+0x268>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0c9b      	lsrs	r3, r3, #18
 8001ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a64      	ldr	r2, [pc, #400]	; (8001c7c <HAL_I2C_Init+0x25c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d802      	bhi.n	8001af4 <HAL_I2C_Init+0xd4>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3301      	adds	r3, #1
 8001af2:	e009      	b.n	8001b08 <HAL_I2C_Init+0xe8>
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a63      	ldr	r2, [pc, #396]	; (8001c8c <HAL_I2C_Init+0x26c>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	3301      	adds	r3, #1
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4956      	ldr	r1, [pc, #344]	; (8001c7c <HAL_I2C_Init+0x25c>)
 8001b24:	428b      	cmp	r3, r1
 8001b26:	d80d      	bhi.n	8001b44 <HAL_I2C_Init+0x124>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e59      	subs	r1, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	bf38      	it	cc
 8001b40:	2304      	movcc	r3, #4
 8001b42:	e04f      	b.n	8001be4 <HAL_I2C_Init+0x1c4>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d111      	bne.n	8001b70 <HAL_I2C_Init+0x150>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1e58      	subs	r0, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	e012      	b.n	8001b96 <HAL_I2C_Init+0x176>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	0099      	lsls	r1, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Init+0x17e>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e022      	b.n	8001be4 <HAL_I2C_Init+0x1c4>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_I2C_Init+0x1a4>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1e58      	subs	r0, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6859      	ldr	r1, [r3, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	440b      	add	r3, r1
 8001bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc2:	e00f      	b.n	8001be4 <HAL_I2C_Init+0x1c4>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1e58      	subs	r0, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	0099      	lsls	r1, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	6809      	ldr	r1, [r1, #0]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6911      	ldr	r1, [r2, #16]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68d2      	ldr	r2, [r2, #12]
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	000186a0 	.word	0x000186a0
 8001c80:	001e847f 	.word	0x001e847f
 8001c84:	003d08ff 	.word	0x003d08ff
 8001c88:	431bde83 	.word	0x431bde83
 8001c8c:	10624dd3 	.word	0x10624dd3

08001c90 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e128      	b.n	8001ef4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a90      	ldr	r2, [pc, #576]	; (8001efc <HAL_I2S_Init+0x26c>)
 8001cba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff f95f 	bl	8000f80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cd8:	f023 030f 	bic.w	r3, r3, #15
 8001cdc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d060      	beq.n	8001db0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001cf6:	2310      	movs	r3, #16
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e001      	b.n	8001d00 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d802      	bhi.n	8001d0e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f002 fb88 	bl	8004424 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d14:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1e:	d125      	bne.n	8001d6c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d010      	beq.n	8001d4a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	3305      	adds	r3, #5
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e01f      	b.n	8001d8a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	3305      	adds	r3, #5
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e00e      	b.n	8001d8a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	3305      	adds	r3, #5
 8001d88:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4a5c      	ldr	r2, [pc, #368]	; (8001f00 <HAL_I2S_Init+0x270>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	e003      	b.n	8001db8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d902      	bls.n	8001dc4 <HAL_I2S_Init+0x134>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2bff      	cmp	r3, #255	; 0xff
 8001dc2:	d907      	bls.n	8001dd4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f043 0210 	orr.w	r2, r3, #16
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e08f      	b.n	8001ef4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	ea42 0103 	orr.w	r1, r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001df2:	f023 030f 	bic.w	r3, r3, #15
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6851      	ldr	r1, [r2, #4]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6892      	ldr	r2, [r2, #8]
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	68d2      	ldr	r2, [r2, #12]
 8001e04:	4311      	orrs	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6992      	ldr	r2, [r2, #24]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e16:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d161      	bne.n	8001ee4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a38      	ldr	r2, [pc, #224]	; (8001f04 <HAL_I2S_Init+0x274>)
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a37      	ldr	r2, [pc, #220]	; (8001f08 <HAL_I2S_Init+0x278>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2S_Init+0x1a4>
 8001e30:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_I2S_Init+0x27c>)
 8001e32:	e001      	b.n	8001e38 <HAL_I2S_Init+0x1a8>
 8001e34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	4932      	ldr	r1, [pc, #200]	; (8001f08 <HAL_I2S_Init+0x278>)
 8001e40:	428a      	cmp	r2, r1
 8001e42:	d101      	bne.n	8001e48 <HAL_I2S_Init+0x1b8>
 8001e44:	4a31      	ldr	r2, [pc, #196]	; (8001f0c <HAL_I2S_Init+0x27c>)
 8001e46:	e001      	b.n	8001e4c <HAL_I2S_Init+0x1bc>
 8001e48:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e50:	f023 030f 	bic.w	r3, r3, #15
 8001e54:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <HAL_I2S_Init+0x278>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <HAL_I2S_Init+0x1d4>
 8001e60:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_I2S_Init+0x27c>)
 8001e62:	e001      	b.n	8001e68 <HAL_I2S_Init+0x1d8>
 8001e64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e68:	2202      	movs	r2, #2
 8001e6a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <HAL_I2S_Init+0x278>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_I2S_Init+0x1ea>
 8001e76:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <HAL_I2S_Init+0x27c>)
 8001e78:	e001      	b.n	8001e7e <HAL_I2S_Init+0x1ee>
 8001e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e8a:	d003      	beq.n	8001e94 <HAL_I2S_Init+0x204>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d103      	bne.n	8001e9c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e001      	b.n	8001ea0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	b299      	uxth	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001eb6:	4303      	orrs	r3, r0
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	897b      	ldrh	r3, [r7, #10]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ecc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <HAL_I2S_Init+0x278>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_I2S_Init+0x24c>
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_I2S_Init+0x27c>)
 8001eda:	e001      	b.n	8001ee0 <HAL_I2S_Init+0x250>
 8001edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ee0:	897a      	ldrh	r2, [r7, #10]
 8001ee2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	08002007 	.word	0x08002007
 8001f00:	cccccccd 	.word	0xcccccccd
 8001f04:	0800211d 	.word	0x0800211d
 8001f08:	40003800 	.word	0x40003800
 8001f0c:	40003400 	.word	0x40003400

08001f10 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	881a      	ldrh	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	1c9a      	adds	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10e      	bne.n	8001fa0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f90:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffb8 	bl	8001f10 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	b292      	uxth	r2, r2
 8001fbc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	1c9a      	adds	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10e      	bne.n	8001ffe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff93 	bl	8001f24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b04      	cmp	r3, #4
 8002020:	d13a      	bne.n	8002098 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d109      	bne.n	8002040 <I2S_IRQHandler+0x3a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d102      	bne.n	8002040 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffb4 	bl	8001fa8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	d126      	bne.n	8002098 <I2S_IRQHandler+0x92>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b20      	cmp	r3, #32
 8002056:	d11f      	bne.n	8002098 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002066:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ff50 	bl	8001f38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d136      	bne.n	8002112 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d109      	bne.n	80020c2 <I2S_IRQHandler+0xbc>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b8:	2b80      	cmp	r3, #128	; 0x80
 80020ba:	d102      	bne.n	80020c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff45 	bl	8001f4c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d122      	bne.n	8002112 <I2S_IRQHandler+0x10c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d11b      	bne.n	8002112 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	f043 0204 	orr.w	r2, r3, #4
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff13 	bl	8001f38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4aa2      	ldr	r2, [pc, #648]	; (80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002136:	4ba2      	ldr	r3, [pc, #648]	; (80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002138:	e001      	b.n	800213e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800213a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a9b      	ldr	r2, [pc, #620]	; (80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002154:	4b9a      	ldr	r3, [pc, #616]	; (80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002156:	e001      	b.n	800215c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002158:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002168:	d004      	beq.n	8002174 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 8099 	bne.w	80022a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b02      	cmp	r3, #2
 800217c:	d107      	bne.n	800218e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f925 	bl	80023d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d107      	bne.n	80021a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f9c8 	bl	8002538 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b40      	cmp	r3, #64	; 0x40
 80021b0:	d13a      	bne.n	8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d035      	beq.n	8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a7e      	ldr	r2, [pc, #504]	; (80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80021c6:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80021c8:	e001      	b.n	80021ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80021ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4979      	ldr	r1, [pc, #484]	; (80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80021d6:	428b      	cmp	r3, r1
 80021d8:	d101      	bne.n	80021de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80021da:	4b79      	ldr	r3, [pc, #484]	; (80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80021dc:	e001      	b.n	80021e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80021de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f043 0202 	orr.w	r2, r3, #2
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fe88 	bl	8001f38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b08      	cmp	r3, #8
 8002230:	f040 80be 	bne.w	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80b8 	beq.w	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800224e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a59      	ldr	r2, [pc, #356]	; (80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800225a:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800225c:	e001      	b.n	8002262 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800225e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4954      	ldr	r1, [pc, #336]	; (80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800226a:	428b      	cmp	r3, r1
 800226c:	d101      	bne.n	8002272 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800226e:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002270:	e001      	b.n	8002276 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002276:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800227a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f043 0204 	orr.w	r2, r3, #4
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fe4a 	bl	8001f38 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022a4:	e084      	b.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d107      	bne.n	80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8be 	bl	800243c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d107      	bne.n	80022da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f8fd 	bl	80024d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d12f      	bne.n	8002344 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d02a      	beq.n	8002344 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002308:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800230a:	e001      	b.n	8002310 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800230c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4929      	ldr	r1, [pc, #164]	; (80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002318:	428b      	cmp	r3, r1
 800231a:	d101      	bne.n	8002320 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800231c:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800231e:	e001      	b.n	8002324 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002320:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002324:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002328:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f043 0202 	orr.w	r2, r3, #2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fdfa 	bl	8001f38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b08      	cmp	r3, #8
 800234c:	d131      	bne.n	80023b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d02c      	beq.n	80023b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a17      	ldr	r2, [pc, #92]	; (80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002362:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002364:	e001      	b.n	800236a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4912      	ldr	r1, [pc, #72]	; (80023bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002372:	428b      	cmp	r3, r1
 8002374:	d101      	bne.n	800237a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002378:	e001      	b.n	800237e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800237a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800237e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002382:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002392:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	f043 0204 	orr.w	r2, r3, #4
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff fdc5 	bl	8001f38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023ae:	e000      	b.n	80023b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023b0:	bf00      	nop
}
 80023b2:	bf00      	nop
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40003800 	.word	0x40003800
 80023c0:	40003400 	.word	0x40003400

080023c4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	1c99      	adds	r1, r3, #2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6251      	str	r1, [r2, #36]	; 0x24
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d113      	bne.n	8002432 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002418:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ffc9 	bl	80023c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	1c99      	adds	r1, r3, #2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6251      	str	r1, [r2, #36]	; 0x24
 800244e:	8819      	ldrh	r1, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <I2SEx_TxISR_I2SExt+0x90>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <I2SEx_TxISR_I2SExt+0x22>
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <I2SEx_TxISR_I2SExt+0x94>)
 800245c:	e001      	b.n	8002462 <I2SEx_TxISR_I2SExt+0x26>
 800245e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002462:	460a      	mov	r2, r1
 8002464:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d121      	bne.n	80024c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <I2SEx_TxISR_I2SExt+0x90>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <I2SEx_TxISR_I2SExt+0x50>
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <I2SEx_TxISR_I2SExt+0x94>)
 800248a:	e001      	b.n	8002490 <I2SEx_TxISR_I2SExt+0x54>
 800248c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	490d      	ldr	r1, [pc, #52]	; (80024cc <I2SEx_TxISR_I2SExt+0x90>)
 8002498:	428b      	cmp	r3, r1
 800249a:	d101      	bne.n	80024a0 <I2SEx_TxISR_I2SExt+0x64>
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <I2SEx_TxISR_I2SExt+0x94>)
 800249e:	e001      	b.n	80024a4 <I2SEx_TxISR_I2SExt+0x68>
 80024a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff81 	bl	80023c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40003800 	.word	0x40003800
 80024d0:	40003400 	.word	0x40003400

080024d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68d8      	ldr	r0, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	1c99      	adds	r1, r3, #2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	62d1      	str	r1, [r2, #44]	; 0x2c
 80024ec:	b282      	uxth	r2, r0
 80024ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d113      	bne.n	8002530 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002516:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ff4a 	bl	80023c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <I2SEx_RxISR_I2SExt+0x90>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <I2SEx_RxISR_I2SExt+0x16>
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <I2SEx_RxISR_I2SExt+0x94>)
 800254c:	e001      	b.n	8002552 <I2SEx_RxISR_I2SExt+0x1a>
 800254e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002552:	68d8      	ldr	r0, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	1c99      	adds	r1, r3, #2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800255e:	b282      	uxth	r2, r0
 8002560:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d121      	bne.n	80025be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <I2SEx_RxISR_I2SExt+0x90>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d101      	bne.n	8002588 <I2SEx_RxISR_I2SExt+0x50>
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <I2SEx_RxISR_I2SExt+0x94>)
 8002586:	e001      	b.n	800258c <I2SEx_RxISR_I2SExt+0x54>
 8002588:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	490d      	ldr	r1, [pc, #52]	; (80025c8 <I2SEx_RxISR_I2SExt+0x90>)
 8002594:	428b      	cmp	r3, r1
 8002596:	d101      	bne.n	800259c <I2SEx_RxISR_I2SExt+0x64>
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <I2SEx_RxISR_I2SExt+0x94>)
 800259a:	e001      	b.n	80025a0 <I2SEx_RxISR_I2SExt+0x68>
 800259c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d106      	bne.n	80025be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff03 	bl	80023c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40003800 	.word	0x40003800
 80025cc:	40003400 	.word	0x40003400

080025d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d2:	b08f      	sub	sp, #60	; 0x3c
 80025d4:	af0a      	add	r7, sp, #40	; 0x28
 80025d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e10f      	b.n	8002802 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d106      	bne.n	8002602 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f005 fb47 	bl	8007c90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d102      	bne.n	800261c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f002 fb14 	bl	8004c4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	687e      	ldr	r6, [r7, #4]
 800262e:	466d      	mov	r5, sp
 8002630:	f106 0410 	add.w	r4, r6, #16
 8002634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800263a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800263c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002640:	e885 0003 	stmia.w	r5, {r0, r1}
 8002644:	1d33      	adds	r3, r6, #4
 8002646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002648:	6838      	ldr	r0, [r7, #0]
 800264a:	f002 f9eb 	bl	8004a24 <USB_CoreInit>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0d0      	b.n	8002802 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f002 fb02 	bl	8004c70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e04a      	b.n	8002708 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	333d      	adds	r3, #61	; 0x3d
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	333c      	adds	r3, #60	; 0x3c
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	b298      	uxth	r0, r3
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	3342      	adds	r3, #66	; 0x42
 80026ae:	4602      	mov	r2, r0
 80026b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	333f      	adds	r3, #63	; 0x3f
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3344      	adds	r3, #68	; 0x44
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	3348      	adds	r3, #72	; 0x48
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3350      	adds	r3, #80	; 0x50
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	3301      	adds	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	d3af      	bcc.n	8002672 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	e044      	b.n	80027a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	3301      	adds	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d3b5      	bcc.n	8002718 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	687e      	ldr	r6, [r7, #4]
 80027b4:	466d      	mov	r5, sp
 80027b6:	f106 0410 	add.w	r4, r6, #16
 80027ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80027ca:	1d33      	adds	r3, r6, #4
 80027cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ce:	6838      	ldr	r0, [r7, #0]
 80027d0:	f002 fa78 	bl	8004cc4 <USB_DevInit>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00d      	b.n	8002802 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 fac0 	bl	8005d80 <USB_DevDisconnect>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800280a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_PCD_Start+0x1c>
 8002822:	2302      	movs	r3, #2
 8002824:	e020      	b.n	8002868 <HAL_PCD_Start+0x5e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	2b01      	cmp	r3, #1
 8002834:	d109      	bne.n	800284a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800283a:	2b01      	cmp	r3, #1
 800283c:	d005      	beq.n	800284a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f002 f9ec 	bl	8004c2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 fa70 	bl	8005d3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b08d      	sub	sp, #52	; 0x34
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fb2e 	bl	8005ee8 <USB_GetMode>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 839d 	bne.w	8002fce <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f003 fa92 	bl	8005dc2 <USB_ReadInterrupts>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8393 	beq.w	8002fcc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fa89 	bl	8005dc2 <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d107      	bne.n	80028ca <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f002 0202 	and.w	r2, r2, #2
 80028c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 fa77 	bl	8005dc2 <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d161      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0210 	bic.w	r2, r2, #16
 80028ec:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	0c5b      	lsrs	r3, r3, #17
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	2b02      	cmp	r3, #2
 8002918:	d124      	bne.n	8002964 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d035      	beq.n	8002992 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002934:	b29b      	uxth	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	6a38      	ldr	r0, [r7, #32]
 800293a:	f003 f8dd 	bl	8005af8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800294a:	441a      	add	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	699a      	ldr	r2, [r3, #24]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800295c:	441a      	add	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	619a      	str	r2, [r3, #24]
 8002962:	e016      	b.n	8002992 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	0c5b      	lsrs	r3, r3, #17
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	2b06      	cmp	r3, #6
 800296e:	d110      	bne.n	8002992 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002976:	2208      	movs	r2, #8
 8002978:	4619      	mov	r1, r3
 800297a:	6a38      	ldr	r0, [r7, #32]
 800297c:	f003 f8bc 	bl	8005af8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800298c:	441a      	add	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0210 	orr.w	r2, r2, #16
 80029a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 fa0b 	bl	8005dc2 <USB_ReadInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029b6:	d16e      	bne.n	8002a96 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fa11 	bl	8005de8 <USB_ReadDevAllOutEpInterrupt>
 80029c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029c8:	e062      	b.n	8002a90 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d057      	beq.n	8002a84 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fa36 	bl	8005e50 <USB_ReadDevOutEPInterrupt>
 80029e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00c      	beq.n	8002a0a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fc:	461a      	mov	r2, r3
 80029fe:	2301      	movs	r3, #1
 8002a00:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fdb1 	bl	800356c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00c      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a20:	461a      	mov	r2, r3
 8002a22:	2308      	movs	r3, #8
 8002a24:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 feab 	bl	8003784 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a44:	461a      	mov	r2, r3
 8002a46:	2310      	movs	r3, #16
 8002a48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a60:	461a      	mov	r2, r3
 8002a62:	2320      	movs	r3, #32
 8002a64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d009      	beq.n	8002a84 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	3301      	adds	r3, #1
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	085b      	lsrs	r3, r3, #1
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d199      	bne.n	80029ca <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 f991 	bl	8005dc2 <USB_ReadInterrupts>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aaa:	f040 80c0 	bne.w	8002c2e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 f9b2 	bl	8005e1c <USB_ReadDevAllInEpInterrupt>
 8002ab8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002abe:	e0b2      	b.n	8002c26 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80a7 	beq.w	8002c1a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 f9d8 	bl	8005e8c <USB_ReadDevInEPInterrupt>
 8002adc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d057      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	2201      	movs	r2, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69f9      	ldr	r1, [r7, #28]
 8002b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b08:	4013      	ands	r3, r2
 8002b0a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d132      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3348      	adds	r3, #72	; 0x48
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4403      	add	r3, r0
 8002b46:	3344      	adds	r3, #68	; 0x44
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4419      	add	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4403      	add	r3, r0
 8002b5a:	3348      	adds	r3, #72	; 0x48
 8002b5c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d113      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x31c>
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3350      	adds	r3, #80	; 0x50
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d108      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b84:	461a      	mov	r2, r3
 8002b86:	2101      	movs	r1, #1
 8002b88:	f003 f9e0 	bl	8005f4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f005 f90b 	bl	8007dae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2310      	movs	r3, #16
 8002bce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be6:	461a      	mov	r2, r3
 8002be8:	2340      	movs	r3, #64	; 0x40
 8002bea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c02:	461a      	mov	r2, r3
 8002c04:	2302      	movs	r3, #2
 8002c06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fc1b 	bl	8003450 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f47f af49 	bne.w	8002ac0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 f8c5 	bl	8005dc2 <USB_ReadInterrupts>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c42:	d122      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fe27 	bl	80038c0 <HAL_PCDEx_LPM_Callback>
 8002c72:	e002      	b.n	8002c7a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f005 f907 	bl	8007e88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 f897 	bl	8005dc2 <USB_ReadInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9e:	d112      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d102      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f005 f8c3 	bl	8007e3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002cc4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 f879 	bl	8005dc2 <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	f040 80c7 	bne.w	8002e6c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f002 f947 	bl	8004f8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d02:	e056      	b.n	8002db2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d10:	461a      	mov	r2, r3
 8002d12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d16:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d28:	0151      	lsls	r1, r2, #5
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d36:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d48:	0151      	lsls	r1, r2, #5
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	440a      	add	r2, r1
 8002d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d64:	461a      	mov	r2, r3
 8002d66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d6a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7c:	0151      	lsls	r1, r2, #5
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	440a      	add	r2, r1
 8002d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9c:	0151      	lsls	r1, r2, #5
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	440a      	add	r2, r1
 8002da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002daa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dae:	3301      	adds	r3, #1
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d3a3      	bcc.n	8002d04 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002dce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d016      	beq.n	8002e06 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de8:	f043 030b 	orr.w	r3, r3, #11
 8002dec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dfe:	f043 030b 	orr.w	r3, r3, #11
 8002e02:	6453      	str	r3, [r2, #68]	; 0x44
 8002e04:	e015      	b.n	8002e32 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e18:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e1c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e2c:	f043 030b 	orr.w	r3, r3, #11
 8002e30:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e44:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e56:	461a      	mov	r2, r3
 8002e58:	f003 f878 	bl	8005f4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f002 ffa6 	bl	8005dc2 <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e80:	d124      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 f83c 	bl	8005f04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f002 f8dc 	bl	800504e <USB_GetDevSpeed>
 8002e96:	4603      	mov	r3, r0
 8002e98:	461a      	mov	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681c      	ldr	r4, [r3, #0]
 8002ea2:	f001 f9af 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 8002ea6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f001 fe19 	bl	8004ae8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f004 ffa1 	bl	8007dfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 ff76 	bl	8005dc2 <USB_ReadInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d10a      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f004 ff7e 	bl	8007de2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f002 0208 	and.w	r2, r2, #8
 8002ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 ff61 	bl	8005dc2 <USB_ReadInterrupts>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f0a:	d10f      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f004 ffd6 	bl	8007ec8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f002 ff46 	bl	8005dc2 <USB_ReadInterrupts>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f40:	d10f      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f004 ffa9 	bl	8007ea4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 ff2b 	bl	8005dc2 <USB_ReadInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f76:	d10a      	bne.n	8002f8e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f004 ffb7 	bl	8007eec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 ff15 	bl	8005dc2 <USB_ReadInterrupts>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d115      	bne.n	8002fce <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f004 ffa7 	bl	8007f08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	e000      	b.n	8002fce <HAL_PCD_IRQHandler+0x75e>
      return;
 8002fcc:	bf00      	nop
    }
  }
}
 8002fce:	3734      	adds	r7, #52	; 0x34
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd90      	pop	{r4, r7, pc}

08002fd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_PCD_SetAddress+0x1a>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e013      	b.n	8003016 <HAL_PCD_SetAddress+0x42>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f002 fe73 	bl	8005cf2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	4608      	mov	r0, r1
 8003028:	4611      	mov	r1, r2
 800302a:	461a      	mov	r2, r3
 800302c:	4603      	mov	r3, r0
 800302e:	70fb      	strb	r3, [r7, #3]
 8003030:	460b      	mov	r3, r1
 8003032:	803b      	strh	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800303c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003040:	2b00      	cmp	r3, #0
 8003042:	da0f      	bge.n	8003064 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	f003 020f 	and.w	r2, r3, #15
 800304a:	4613      	mov	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	3338      	adds	r3, #56	; 0x38
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	3304      	adds	r3, #4
 800305a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	705a      	strb	r2, [r3, #1]
 8003062:	e00f      	b.n	8003084 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 020f 	and.w	r2, r3, #15
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	3304      	adds	r3, #4
 800307c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	b2da      	uxtb	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003090:	883a      	ldrh	r2, [r7, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	78ba      	ldrb	r2, [r7, #2]
 800309a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	785b      	ldrb	r3, [r3, #1]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030ae:	78bb      	ldrb	r3, [r7, #2]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d102      	bne.n	80030ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_PCD_EP_Open+0xaa>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e00e      	b.n	80030e6 <HAL_PCD_EP_Open+0xc8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68f9      	ldr	r1, [r7, #12]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 ffde 	bl	8005098 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80030e4:	7afb      	ldrb	r3, [r7, #11]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	460b      	mov	r3, r1
 80030f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da0f      	bge.n	8003122 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	3338      	adds	r3, #56	; 0x38
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	705a      	strb	r2, [r3, #1]
 8003120:	e00f      	b.n	8003142 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 020f 	and.w	r2, r3, #15
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_PCD_EP_Close+0x6e>
 8003158:	2302      	movs	r3, #2
 800315a:	e00e      	b.n	800317a <HAL_PCD_EP_Close+0x8c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68f9      	ldr	r1, [r7, #12]
 800316a:	4618      	mov	r0, r3
 800316c:	f002 f81c 	bl	80051a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	460b      	mov	r3, r1
 8003190:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003192:	7afb      	ldrb	r3, [r7, #11]
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	3304      	adds	r3, #4
 80031aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c4:	7afb      	ldrb	r3, [r7, #11]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	6979      	ldr	r1, [r7, #20]
 80031f6:	f002 faf7 	bl	80057e8 <USB_EP0StartXfer>
 80031fa:	e008      	b.n	800320e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	6979      	ldr	r1, [r7, #20]
 800320a:	f002 f8a9 	bl	8005360 <USB_EPStartXfer>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	460b      	mov	r3, r1
 8003256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003258:	7afb      	ldrb	r3, [r7, #11]
 800325a:	f003 020f 	and.w	r2, r3, #15
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	3338      	adds	r3, #56	; 0x38
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2201      	movs	r2, #1
 8003286:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003288:	7afb      	ldrb	r3, [r7, #11]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	b2da      	uxtb	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d102      	bne.n	80032a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a2:	7afb      	ldrb	r3, [r7, #11]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	6979      	ldr	r1, [r7, #20]
 80032ba:	f002 fa95 	bl	80057e8 <USB_EP0StartXfer>
 80032be:	e008      	b.n	80032d2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	6979      	ldr	r1, [r7, #20]
 80032ce:	f002 f847 	bl	8005360 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d901      	bls.n	80032fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e050      	b.n	800339c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da0f      	bge.n	8003322 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	3338      	adds	r3, #56	; 0x38
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	705a      	strb	r2, [r3, #1]
 8003320:	e00d      	b.n	800333e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_PCD_EP_SetStall+0x82>
 800335a:	2302      	movs	r3, #2
 800335c:	e01e      	b.n	800339c <HAL_PCD_EP_SetStall+0xc0>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68f9      	ldr	r1, [r7, #12]
 800336c:	4618      	mov	r0, r3
 800336e:	f002 fbec 	bl	8005b4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	b2d9      	uxtb	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800338c:	461a      	mov	r2, r3
 800338e:	f002 fddd 	bl	8005f4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d901      	bls.n	80033c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e042      	b.n	8003448 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da0f      	bge.n	80033ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 020f 	and.w	r2, r3, #15
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	3338      	adds	r3, #56	; 0x38
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	705a      	strb	r2, [r3, #1]
 80033e8:	e00f      	b.n	800340a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_PCD_EP_ClrStall+0x86>
 8003426:	2302      	movs	r3, #2
 8003428:	e00e      	b.n	8003448 <HAL_PCD_EP_ClrStall+0xa4>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	4618      	mov	r0, r3
 800343a:	f002 fbf4 	bl	8005c26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af02      	add	r7, sp, #8
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	3338      	adds	r3, #56	; 0x38
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	3304      	adds	r3, #4
 8003476:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	429a      	cmp	r2, r3
 8003482:	d901      	bls.n	8003488 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e06c      	b.n	8003562 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	429a      	cmp	r2, r3
 800349c:	d902      	bls.n	80034a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	3303      	adds	r3, #3
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034ac:	e02b      	b.n	8003506 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d902      	bls.n	80034ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3303      	adds	r3, #3
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	68d9      	ldr	r1, [r3, #12]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	4603      	mov	r3, r0
 80034e8:	6978      	ldr	r0, [r7, #20]
 80034ea:	f002 fad0 	bl	8005a8e <USB_WritePacket>

    ep->xfer_buff  += len;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	441a      	add	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	441a      	add	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	b29b      	uxth	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	429a      	cmp	r2, r3
 800351a:	d809      	bhi.n	8003530 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003524:	429a      	cmp	r2, r3
 8003526:	d203      	bcs.n	8003530 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1be      	bne.n	80034ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	429a      	cmp	r2, r3
 800353a:	d811      	bhi.n	8003560 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	2201      	movs	r2, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	43db      	mvns	r3, r3
 8003556:	6939      	ldr	r1, [r7, #16]
 8003558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800355c:	4013      	ands	r3, r2
 800355e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	333c      	adds	r3, #60	; 0x3c
 8003584:	3304      	adds	r3, #4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	f040 80a0 	bne.w	80036e4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d015      	beq.n	80035da <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a72      	ldr	r2, [pc, #456]	; (800377c <PCD_EP_OutXfrComplete_int+0x210>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	f240 80dd 	bls.w	8003772 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80d7 	beq.w	8003772 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d0:	461a      	mov	r2, r3
 80035d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d6:	6093      	str	r3, [r2, #8]
 80035d8:	e0cb      	b.n	8003772 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	2320      	movs	r3, #32
 80035f4:	6093      	str	r3, [r2, #8]
 80035f6:	e0bc      	b.n	8003772 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f040 80b7 	bne.w	8003772 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a5d      	ldr	r2, [pc, #372]	; (800377c <PCD_EP_OutXfrComplete_int+0x210>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d90f      	bls.n	800362c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003622:	461a      	mov	r2, r3
 8003624:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003628:	6093      	str	r3, [r2, #8]
 800362a:	e0a2      	b.n	8003772 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800363e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	0159      	lsls	r1, r3, #5
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	440b      	add	r3, r1
 8003648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003652:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4403      	add	r3, r0
 8003662:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003666:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800367a:	6819      	ldr	r1, [r3, #0]
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4403      	add	r3, r0
 800368a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4419      	add	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4403      	add	r3, r0
 80036a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036a4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d114      	bne.n	80036d6 <PCD_EP_OutXfrComplete_int+0x16a>
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d108      	bne.n	80036d6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036ce:	461a      	mov	r2, r3
 80036d0:	2101      	movs	r1, #1
 80036d2:	f002 fc3b 	bl	8005f4c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f004 fb4b 	bl	8007d78 <HAL_PCD_DataOutStageCallback>
 80036e2:	e046      	b.n	8003772 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a26      	ldr	r2, [pc, #152]	; (8003780 <PCD_EP_OutXfrComplete_int+0x214>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d124      	bne.n	8003736 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003702:	461a      	mov	r2, r3
 8003704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003708:	6093      	str	r3, [r2, #8]
 800370a:	e032      	b.n	8003772 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003722:	461a      	mov	r2, r3
 8003724:	2320      	movs	r3, #32
 8003726:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	4619      	mov	r1, r3
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f004 fb22 	bl	8007d78 <HAL_PCD_DataOutStageCallback>
 8003734:	e01d      	b.n	8003772 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d114      	bne.n	8003766 <PCD_EP_OutXfrComplete_int+0x1fa>
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d108      	bne.n	8003766 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800375e:	461a      	mov	r2, r3
 8003760:	2100      	movs	r1, #0
 8003762:	f002 fbf3 	bl	8005f4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f004 fb03 	bl	8007d78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	4f54300a 	.word	0x4f54300a
 8003780:	4f54310a 	.word	0x4f54310a

08003784 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	333c      	adds	r3, #60	; 0x3c
 800379c:	3304      	adds	r3, #4
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a15      	ldr	r2, [pc, #84]	; (800380c <PCD_EP_OutSetupPacket_int+0x88>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d90e      	bls.n	80037d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d0:	461a      	mov	r2, r3
 80037d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f004 fabb 	bl	8007d54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <PCD_EP_OutSetupPacket_int+0x88>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d90c      	bls.n	8003800 <PCD_EP_OutSetupPacket_int+0x7c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d108      	bne.n	8003800 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037f8:	461a      	mov	r2, r3
 80037fa:	2101      	movs	r1, #1
 80037fc:	f002 fba6 	bl	8005f4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	4f54300a 	.word	0x4f54300a

08003810 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
 800381c:	4613      	mov	r3, r2
 800381e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800382e:	883b      	ldrh	r3, [r7, #0]
 8003830:	0419      	lsls	r1, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	430a      	orrs	r2, r1
 800383a:	629a      	str	r2, [r3, #40]	; 0x28
 800383c:	e028      	b.n	8003890 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	4413      	add	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	e00d      	b.n	800386e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	3340      	adds	r3, #64	; 0x40
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4413      	add	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	3301      	adds	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	3b01      	subs	r3, #1
 8003874:	429a      	cmp	r2, r3
 8003876:	d3ec      	bcc.n	8003852 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003878:	883b      	ldrh	r3, [r7, #0]
 800387a:	0418      	lsls	r0, r3, #16
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	3b01      	subs	r3, #1
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	4302      	orrs	r2, r0
 8003888:	3340      	adds	r3, #64	; 0x40
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e25b      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d075      	beq.n	80039e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038f6:	4ba3      	ldr	r3, [pc, #652]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d00c      	beq.n	800391c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003902:	4ba0      	ldr	r3, [pc, #640]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800390a:	2b08      	cmp	r3, #8
 800390c:	d112      	bne.n	8003934 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800390e:	4b9d      	ldr	r3, [pc, #628]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391a:	d10b      	bne.n	8003934 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391c:	4b99      	ldr	r3, [pc, #612]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d05b      	beq.n	80039e0 <HAL_RCC_OscConfig+0x108>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d157      	bne.n	80039e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e236      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393c:	d106      	bne.n	800394c <HAL_RCC_OscConfig+0x74>
 800393e:	4b91      	ldr	r3, [pc, #580]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a90      	ldr	r2, [pc, #576]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e01d      	b.n	8003988 <HAL_RCC_OscConfig+0xb0>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0x98>
 8003956:	4b8b      	ldr	r3, [pc, #556]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a8a      	ldr	r2, [pc, #552]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b88      	ldr	r3, [pc, #544]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a87      	ldr	r2, [pc, #540]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	e00b      	b.n	8003988 <HAL_RCC_OscConfig+0xb0>
 8003970:	4b84      	ldr	r3, [pc, #528]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a83      	ldr	r2, [pc, #524]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b81      	ldr	r3, [pc, #516]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a80      	ldr	r2, [pc, #512]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d013      	beq.n	80039b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fd fd52 	bl	8001438 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003998:	f7fd fd4e 	bl	8001438 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e1fb      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	4b76      	ldr	r3, [pc, #472]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0xc0>
 80039b6:	e014      	b.n	80039e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fd fd3e 	bl	8001438 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fd fd3a 	bl	8001438 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e1e7      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	4b6c      	ldr	r3, [pc, #432]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0xe8>
 80039de:	e000      	b.n	80039e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d063      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ee:	4b65      	ldr	r3, [pc, #404]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b62      	ldr	r3, [pc, #392]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d11c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a06:	4b5f      	ldr	r3, [pc, #380]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d116      	bne.n	8003a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	4b5c      	ldr	r3, [pc, #368]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_RCC_OscConfig+0x152>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e1bb      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2a:	4b56      	ldr	r3, [pc, #344]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4952      	ldr	r1, [pc, #328]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3e:	e03a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a48:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <HAL_RCC_OscConfig+0x2b0>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fd fcf3 	bl	8001438 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a56:	f7fd fcef 	bl	8001438 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e19c      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	4b46      	ldr	r3, [pc, #280]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	4b43      	ldr	r3, [pc, #268]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4940      	ldr	r1, [pc, #256]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
 8003a88:	e015      	b.n	8003ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <HAL_RCC_OscConfig+0x2b0>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fd fcd2 	bl	8001438 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a98:	f7fd fcce 	bl	8001438 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e17b      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d030      	beq.n	8003b24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d016      	beq.n	8003af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aca:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <HAL_RCC_OscConfig+0x2b4>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fd fcb2 	bl	8001438 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fd fcae 	bl	8001438 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e15b      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x200>
 8003af6:	e015      	b.n	8003b24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_OscConfig+0x2b4>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afe:	f7fd fc9b 	bl	8001438 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b06:	f7fd fc97 	bl	8001438 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e144      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	4b1a      	ldr	r3, [pc, #104]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80a0 	beq.w	8003c72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b50:	6413      	str	r3, [r2, #64]	; 0x40
 8003b52:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b62:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_OscConfig+0x2b8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d121      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_RCC_OscConfig+0x2b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <HAL_RCC_OscConfig+0x2b8>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fc5d 	bl	8001438 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	e011      	b.n	8003ba6 <HAL_RCC_OscConfig+0x2ce>
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800
 8003b88:	42470000 	.word	0x42470000
 8003b8c:	42470e80 	.word	0x42470e80
 8003b90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b94:	f7fd fc50 	bl	8001438 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0fd      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4b81      	ldr	r3, [pc, #516]	; (8003dac <HAL_RCC_OscConfig+0x4d4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2f0>
 8003bba:	4b7d      	ldr	r3, [pc, #500]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a7c      	ldr	r2, [pc, #496]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	e01c      	b.n	8003c02 <HAL_RCC_OscConfig+0x32a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d10c      	bne.n	8003bea <HAL_RCC_OscConfig+0x312>
 8003bd0:	4b77      	ldr	r3, [pc, #476]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a76      	ldr	r2, [pc, #472]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003bd6:	f043 0304 	orr.w	r3, r3, #4
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	4b74      	ldr	r3, [pc, #464]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a73      	ldr	r2, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	e00b      	b.n	8003c02 <HAL_RCC_OscConfig+0x32a>
 8003bea:	4b71      	ldr	r3, [pc, #452]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a70      	ldr	r2, [pc, #448]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf6:	4b6e      	ldr	r3, [pc, #440]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a6d      	ldr	r2, [pc, #436]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d015      	beq.n	8003c36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fc15 	bl	8001438 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fd fc11 	bl	8001438 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e0bc      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ee      	beq.n	8003c12 <HAL_RCC_OscConfig+0x33a>
 8003c34:	e014      	b.n	8003c60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fd fbff 	bl	8001438 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd fbfb 	bl	8001438 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e0a6      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c54:	4b56      	ldr	r3, [pc, #344]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ee      	bne.n	8003c3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d105      	bne.n	8003c72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c66:	4b52      	ldr	r3, [pc, #328]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a51      	ldr	r2, [pc, #324]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8092 	beq.w	8003da0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c7c:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d05c      	beq.n	8003d42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d141      	bne.n	8003d14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c90:	4b48      	ldr	r3, [pc, #288]	; (8003db4 <HAL_RCC_OscConfig+0x4dc>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fd fbcf 	bl	8001438 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9e:	f7fd fbcb 	bl	8001438 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e078      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb0:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	019b      	lsls	r3, r3, #6
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	061b      	lsls	r3, r3, #24
 8003ce0:	4933      	ldr	r1, [pc, #204]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce6:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <HAL_RCC_OscConfig+0x4dc>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fd fba4 	bl	8001438 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7fd fba0 	bl	8001438 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e04d      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d06:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x41c>
 8003d12:	e045      	b.n	8003da0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCC_OscConfig+0x4dc>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fd fb8d 	bl	8001438 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d22:	f7fd fb89 	bl	8001438 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e036      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d34:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f0      	bne.n	8003d22 <HAL_RCC_OscConfig+0x44a>
 8003d40:	e02e      	b.n	8003da0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e029      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d4e:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <HAL_RCC_OscConfig+0x4d8>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d11c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d115      	bne.n	8003d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d76:	4013      	ands	r3, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10d      	bne.n	8003d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d106      	bne.n	8003d9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40007000 	.word	0x40007000
 8003db0:	40023800 	.word	0x40023800
 8003db4:	42470060 	.word	0x42470060

08003db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0cc      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b68      	ldr	r3, [pc, #416]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d90c      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0b8      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e24:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a52      	ldr	r2, [pc, #328]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	494d      	ldr	r1, [pc, #308]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d044      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d119      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e06f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e067      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4934      	ldr	r1, [pc, #208]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fac6 	bl	8001438 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fd fac2 	bl	8001438 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e04f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d20c      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e032      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4916      	ldr	r1, [pc, #88]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	490e      	ldr	r1, [pc, #56]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f3e:	f000 f889 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 8003f42:	4601      	mov	r1, r0
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	5cd3      	ldrb	r3, [r2, r3]
 8003f52:	fa21 f303 	lsr.w	r3, r1, r3
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd fa26 	bl	80013b0 <HAL_InitTick>

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023c00 	.word	0x40023c00
 8003f74:	40023800 	.word	0x40023800
 8003f78:	08008cf0 	.word	0x08008cf0
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	20000004 	.word	0x20000004

08003f84 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08c      	sub	sp, #48	; 0x30
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d129      	bne.n	8003fea <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <HAL_RCC_MCOConfig+0xc4>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <HAL_RCC_MCOConfig+0xc4>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa6:	4b28      	ldr	r3, [pc, #160]	; (8004048 <HAL_RCC_MCOConfig+0xc4>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003fc8:	f107 031c 	add.w	r3, r7, #28
 8003fcc:	4619      	mov	r1, r3
 8003fce:	481f      	ldr	r0, [pc, #124]	; (800404c <HAL_RCC_MCOConfig+0xc8>)
 8003fd0:	f7fd fb72 	bl	80016b8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <HAL_RCC_MCOConfig+0xc4>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	4919      	ldr	r1, [pc, #100]	; (8004048 <HAL_RCC_MCOConfig+0xc4>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003fe8:	e029      	b.n	800403e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	4b16      	ldr	r3, [pc, #88]	; (8004048 <HAL_RCC_MCOConfig+0xc4>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <HAL_RCC_MCOConfig+0xc4>)
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <HAL_RCC_MCOConfig+0xc4>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800400a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400c:	2302      	movs	r3, #2
 800400e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004010:	2303      	movs	r3, #3
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004018:	2300      	movs	r3, #0
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800401c:	f107 031c 	add.w	r3, r7, #28
 8004020:	4619      	mov	r1, r3
 8004022:	480b      	ldr	r0, [pc, #44]	; (8004050 <HAL_RCC_MCOConfig+0xcc>)
 8004024:	f7fd fb48 	bl	80016b8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <HAL_RCC_MCOConfig+0xc4>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	00d9      	lsls	r1, r3, #3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	430b      	orrs	r3, r1
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <HAL_RCC_MCOConfig+0xc4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
}
 800403e:	bf00      	nop
 8004040:	3730      	adds	r7, #48	; 0x30
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	40020000 	.word	0x40020000
 8004050:	40020800 	.word	0x40020800

08004054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	2300      	movs	r3, #0
 8004064:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800406a:	4b63      	ldr	r3, [pc, #396]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b04      	cmp	r3, #4
 8004074:	d007      	beq.n	8004086 <HAL_RCC_GetSysClockFreq+0x32>
 8004076:	2b08      	cmp	r3, #8
 8004078:	d008      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x38>
 800407a:	2b00      	cmp	r3, #0
 800407c:	f040 80b4 	bne.w	80041e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004080:	4b5e      	ldr	r3, [pc, #376]	; (80041fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004082:	60bb      	str	r3, [r7, #8]
       break;
 8004084:	e0b3      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004086:	4b5e      	ldr	r3, [pc, #376]	; (8004200 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004088:	60bb      	str	r3, [r7, #8]
      break;
 800408a:	e0b0      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800408c:	4b5a      	ldr	r3, [pc, #360]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004094:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004096:	4b58      	ldr	r3, [pc, #352]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04a      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a2:	4b55      	ldr	r3, [pc, #340]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	f04f 0400 	mov.w	r4, #0
 80040ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	ea03 0501 	and.w	r5, r3, r1
 80040b8:	ea04 0602 	and.w	r6, r4, r2
 80040bc:	4629      	mov	r1, r5
 80040be:	4632      	mov	r2, r6
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	f04f 0400 	mov.w	r4, #0
 80040c8:	0154      	lsls	r4, r2, #5
 80040ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040ce:	014b      	lsls	r3, r1, #5
 80040d0:	4619      	mov	r1, r3
 80040d2:	4622      	mov	r2, r4
 80040d4:	1b49      	subs	r1, r1, r5
 80040d6:	eb62 0206 	sbc.w	r2, r2, r6
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	f04f 0400 	mov.w	r4, #0
 80040e2:	0194      	lsls	r4, r2, #6
 80040e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040e8:	018b      	lsls	r3, r1, #6
 80040ea:	1a5b      	subs	r3, r3, r1
 80040ec:	eb64 0402 	sbc.w	r4, r4, r2
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	00e2      	lsls	r2, r4, #3
 80040fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040fe:	00d9      	lsls	r1, r3, #3
 8004100:	460b      	mov	r3, r1
 8004102:	4614      	mov	r4, r2
 8004104:	195b      	adds	r3, r3, r5
 8004106:	eb44 0406 	adc.w	r4, r4, r6
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	0262      	lsls	r2, r4, #9
 8004114:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004118:	0259      	lsls	r1, r3, #9
 800411a:	460b      	mov	r3, r1
 800411c:	4614      	mov	r4, r2
 800411e:	4618      	mov	r0, r3
 8004120:	4621      	mov	r1, r4
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f04f 0400 	mov.w	r4, #0
 8004128:	461a      	mov	r2, r3
 800412a:	4623      	mov	r3, r4
 800412c:	f7fc f8b0 	bl	8000290 <__aeabi_uldivmod>
 8004130:	4603      	mov	r3, r0
 8004132:	460c      	mov	r4, r1
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e049      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004138:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	f04f 0400 	mov.w	r4, #0
 8004142:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	ea03 0501 	and.w	r5, r3, r1
 800414e:	ea04 0602 	and.w	r6, r4, r2
 8004152:	4629      	mov	r1, r5
 8004154:	4632      	mov	r2, r6
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	f04f 0400 	mov.w	r4, #0
 800415e:	0154      	lsls	r4, r2, #5
 8004160:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004164:	014b      	lsls	r3, r1, #5
 8004166:	4619      	mov	r1, r3
 8004168:	4622      	mov	r2, r4
 800416a:	1b49      	subs	r1, r1, r5
 800416c:	eb62 0206 	sbc.w	r2, r2, r6
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	f04f 0400 	mov.w	r4, #0
 8004178:	0194      	lsls	r4, r2, #6
 800417a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800417e:	018b      	lsls	r3, r1, #6
 8004180:	1a5b      	subs	r3, r3, r1
 8004182:	eb64 0402 	sbc.w	r4, r4, r2
 8004186:	f04f 0100 	mov.w	r1, #0
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	00e2      	lsls	r2, r4, #3
 8004190:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004194:	00d9      	lsls	r1, r3, #3
 8004196:	460b      	mov	r3, r1
 8004198:	4614      	mov	r4, r2
 800419a:	195b      	adds	r3, r3, r5
 800419c:	eb44 0406 	adc.w	r4, r4, r6
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	02a2      	lsls	r2, r4, #10
 80041aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041ae:	0299      	lsls	r1, r3, #10
 80041b0:	460b      	mov	r3, r1
 80041b2:	4614      	mov	r4, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	4621      	mov	r1, r4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f04f 0400 	mov.w	r4, #0
 80041be:	461a      	mov	r2, r3
 80041c0:	4623      	mov	r3, r4
 80041c2:	f7fc f865 	bl	8000290 <__aeabi_uldivmod>
 80041c6:	4603      	mov	r3, r0
 80041c8:	460c      	mov	r4, r1
 80041ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	3301      	adds	r3, #1
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	60bb      	str	r3, [r7, #8]
      break;
 80041e6:	e002      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041ea:	60bb      	str	r3, [r7, #8]
      break;
 80041ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ee:	68bb      	ldr	r3, [r7, #8]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	00f42400 	.word	0x00f42400
 8004200:	007a1200 	.word	0x007a1200

08004204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <HAL_RCC_GetHCLKFreq+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000000 	.word	0x20000000

0800421c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004220:	f7ff fff0 	bl	8004204 <HAL_RCC_GetHCLKFreq>
 8004224:	4601      	mov	r1, r0
 8004226:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	0a9b      	lsrs	r3, r3, #10
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4a03      	ldr	r2, [pc, #12]	; (8004240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004232:	5cd3      	ldrb	r3, [r2, r3]
 8004234:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004238:	4618      	mov	r0, r3
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40023800 	.word	0x40023800
 8004240:	08008d00 	.word	0x08008d00

08004244 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004268:	2b00      	cmp	r3, #0
 800426a:	d038      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800426c:	4b68      	ldr	r3, [pc, #416]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004272:	f7fd f8e1 	bl	8001438 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800427a:	f7fd f8dd 	bl	8001438 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0bd      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800428c:	4b61      	ldr	r3, [pc, #388]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	019b      	lsls	r3, r3, #6
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	071b      	lsls	r3, r3, #28
 80042aa:	495a      	ldr	r1, [pc, #360]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042b2:	4b57      	ldr	r3, [pc, #348]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042b8:	f7fd f8be 	bl	8001438 <HAL_GetTick>
 80042bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042c0:	f7fd f8ba 	bl	8001438 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e09a      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d2:	4b50      	ldr	r3, [pc, #320]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8083 	beq.w	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4b48      	ldr	r3, [pc, #288]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	4a47      	ldr	r2, [pc, #284]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fa:	6413      	str	r3, [r2, #64]	; 0x40
 80042fc:	4b45      	ldr	r3, [pc, #276]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004308:	4b43      	ldr	r3, [pc, #268]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a42      	ldr	r2, [pc, #264]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004312:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004314:	f7fd f890 	bl	8001438 <HAL_GetTick>
 8004318:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800431c:	f7fd f88c 	bl	8001438 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e06c      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800432e:	4b3a      	ldr	r3, [pc, #232]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004342:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02f      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x166>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	429a      	cmp	r2, r3
 8004356:	d028      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004358:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004360:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004362:	4b2e      	ldr	r3, [pc, #184]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800436e:	4a29      	ldr	r2, [pc, #164]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004374:	4b27      	ldr	r3, [pc, #156]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b01      	cmp	r3, #1
 800437e:	d114      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004380:	f7fd f85a 	bl	8001438 <HAL_GetTick>
 8004384:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004386:	e00a      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004388:	f7fd f856 	bl	8001438 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	; 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e034      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ee      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b6:	d10d      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80043b8:	4b16      	ldr	r3, [pc, #88]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043cc:	4911      	ldr	r1, [pc, #68]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
 80043d2:	e005      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043de:	6093      	str	r3, [r2, #8]
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	4909      	ldr	r1, [pc, #36]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7d1a      	ldrb	r2, [r3, #20]
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004404:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	42470068 	.word	0x42470068
 8004414:	40023800 	.word	0x40023800
 8004418:	40007000 	.word	0x40007000
 800441c:	42470e40 	.word	0x42470e40
 8004420:	424711e0 	.word	0x424711e0

08004424 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d13f      	bne.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004442:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800444a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004452:	2b01      	cmp	r3, #1
 8004454:	d131      	bne.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004456:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004458:	617b      	str	r3, [r7, #20]
          break;
 800445a:	e031      	b.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800445c:	4b1c      	ldr	r3, [pc, #112]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004468:	d109      	bne.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800446a:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800446c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004474:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004476:	fbb2 f3f3 	udiv	r3, r2, r3
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	e008      	b.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044aa:	0f1b      	lsrs	r3, r3, #28
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	617b      	str	r3, [r7, #20]
          break;
 80044b8:	e002      	b.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
          break;
 80044be:	bf00      	nop
        }
      }
      break;
 80044c0:	bf00      	nop
    }
  }
  return frequency;
 80044c2:	697b      	ldr	r3, [r7, #20]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40023800 	.word	0x40023800
 80044d4:	00bb8000 	.word	0x00bb8000
 80044d8:	007a1200 	.word	0x007a1200
 80044dc:	00f42400 	.word	0x00f42400

080044e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e056      	b.n	80045a0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7fc fe05 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004528:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	ea42 0103 	orr.w	r1, r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	f003 0104 	and.w	r1, r3, #4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800458e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e01d      	b.n	80045f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc fdec 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f000 f988 	bl	80048fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	f241 1311 	movw	r3, #4369	; 0x1111
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <HAL_TIM_Base_Stop+0x40>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	f240 4344 	movw	r3, #1092	; 0x444
 8004628:	4013      	ands	r3, r2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d107      	bne.n	800463e <HAL_TIM_Base_Stop+0x40>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d007      	beq.n	800468e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d122      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d11b      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0202 	mvn.w	r2, #2
 80046c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8ee 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8e0 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f8f1 	bl	80048d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d122      	bne.n	800474c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d11b      	bne.n	800474c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0204 	mvn.w	r2, #4
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f8c4 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8b6 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f8c7 	bl	80048d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b08      	cmp	r3, #8
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b08      	cmp	r3, #8
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0208 	mvn.w	r2, #8
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2204      	movs	r2, #4
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f89a 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f88c 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f89d 	bl	80048d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d122      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d11b      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0210 	mvn.w	r2, #16
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2208      	movs	r2, #8
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f870 	bl	80048c0 <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f862 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f873 	bl	80048d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	d107      	bne.n	8004820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0201 	mvn.w	r2, #1
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc fb20 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	2b80      	cmp	r3, #128	; 0x80
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8e2 	bl	8004a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004864:	2b40      	cmp	r3, #64	; 0x40
 8004866:	d107      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f838 	bl	80048e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b20      	cmp	r3, #32
 8004884:	d10e      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d107      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0220 	mvn.w	r2, #32
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8ac 	bl	80049fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a34      	ldr	r2, [pc, #208]	; (80049e0 <TIM_Base_SetConfig+0xe4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00f      	beq.n	8004934 <TIM_Base_SetConfig+0x38>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491a:	d00b      	beq.n	8004934 <TIM_Base_SetConfig+0x38>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a31      	ldr	r2, [pc, #196]	; (80049e4 <TIM_Base_SetConfig+0xe8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_Base_SetConfig+0x38>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a30      	ldr	r2, [pc, #192]	; (80049e8 <TIM_Base_SetConfig+0xec>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_Base_SetConfig+0x38>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a2f      	ldr	r2, [pc, #188]	; (80049ec <TIM_Base_SetConfig+0xf0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d108      	bne.n	8004946 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <TIM_Base_SetConfig+0xe4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01b      	beq.n	8004986 <TIM_Base_SetConfig+0x8a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004954:	d017      	beq.n	8004986 <TIM_Base_SetConfig+0x8a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <TIM_Base_SetConfig+0xe8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <TIM_Base_SetConfig+0x8a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <TIM_Base_SetConfig+0xec>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00f      	beq.n	8004986 <TIM_Base_SetConfig+0x8a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a20      	ldr	r2, [pc, #128]	; (80049ec <TIM_Base_SetConfig+0xf0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00b      	beq.n	8004986 <TIM_Base_SetConfig+0x8a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <TIM_Base_SetConfig+0xf4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <TIM_Base_SetConfig+0x8a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1e      	ldr	r2, [pc, #120]	; (80049f4 <TIM_Base_SetConfig+0xf8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_Base_SetConfig+0x8a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1d      	ldr	r2, [pc, #116]	; (80049f8 <TIM_Base_SetConfig+0xfc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d108      	bne.n	8004998 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <TIM_Base_SetConfig+0xe4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d103      	bne.n	80049cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	615a      	str	r2, [r3, #20]
}
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40014400 	.word	0x40014400
 80049f8:	40014800 	.word	0x40014800

080049fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a24:	b084      	sub	sp, #16
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	f107 001c 	add.w	r0, r7, #28
 8004a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d122      	bne.n	8004a82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f001 fac6 	bl	8006008 <USB_CoreReset>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]
 8004a80:	e01a      	b.n	8004ab8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f001 faba 	bl	8006008 <USB_CoreReset>
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8004aaa:	e005      	b.n	8004ab8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d10b      	bne.n	8004ad6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f043 0206 	orr.w	r2, r3, #6
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ae2:	b004      	add	sp, #16
 8004ae4:	4770      	bx	lr
	...

08004ae8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4613      	mov	r3, r2
 8004af4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d165      	bne.n	8004bc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a41      	ldr	r2, [pc, #260]	; (8004c04 <USB_SetTurnaroundTime+0x11c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d906      	bls.n	8004b12 <USB_SetTurnaroundTime+0x2a>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4a40      	ldr	r2, [pc, #256]	; (8004c08 <USB_SetTurnaroundTime+0x120>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d802      	bhi.n	8004b12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b0c:	230f      	movs	r3, #15
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e062      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4a3c      	ldr	r2, [pc, #240]	; (8004c08 <USB_SetTurnaroundTime+0x120>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d906      	bls.n	8004b28 <USB_SetTurnaroundTime+0x40>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4a3b      	ldr	r2, [pc, #236]	; (8004c0c <USB_SetTurnaroundTime+0x124>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d802      	bhi.n	8004b28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b22:	230e      	movs	r3, #14
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e057      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4a38      	ldr	r2, [pc, #224]	; (8004c0c <USB_SetTurnaroundTime+0x124>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d906      	bls.n	8004b3e <USB_SetTurnaroundTime+0x56>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4a37      	ldr	r2, [pc, #220]	; (8004c10 <USB_SetTurnaroundTime+0x128>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d802      	bhi.n	8004b3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b38:	230d      	movs	r3, #13
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e04c      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a33      	ldr	r2, [pc, #204]	; (8004c10 <USB_SetTurnaroundTime+0x128>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d906      	bls.n	8004b54 <USB_SetTurnaroundTime+0x6c>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4a32      	ldr	r2, [pc, #200]	; (8004c14 <USB_SetTurnaroundTime+0x12c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d802      	bhi.n	8004b54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b4e:	230c      	movs	r3, #12
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e041      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4a2f      	ldr	r2, [pc, #188]	; (8004c14 <USB_SetTurnaroundTime+0x12c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d906      	bls.n	8004b6a <USB_SetTurnaroundTime+0x82>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4a2e      	ldr	r2, [pc, #184]	; (8004c18 <USB_SetTurnaroundTime+0x130>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d802      	bhi.n	8004b6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b64:	230b      	movs	r3, #11
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e036      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	; (8004c18 <USB_SetTurnaroundTime+0x130>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d906      	bls.n	8004b80 <USB_SetTurnaroundTime+0x98>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4a29      	ldr	r2, [pc, #164]	; (8004c1c <USB_SetTurnaroundTime+0x134>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d802      	bhi.n	8004b80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b7a:	230a      	movs	r3, #10
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e02b      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4a26      	ldr	r2, [pc, #152]	; (8004c1c <USB_SetTurnaroundTime+0x134>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d906      	bls.n	8004b96 <USB_SetTurnaroundTime+0xae>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4a25      	ldr	r2, [pc, #148]	; (8004c20 <USB_SetTurnaroundTime+0x138>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d802      	bhi.n	8004b96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b90:	2309      	movs	r3, #9
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e020      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4a21      	ldr	r2, [pc, #132]	; (8004c20 <USB_SetTurnaroundTime+0x138>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d906      	bls.n	8004bac <USB_SetTurnaroundTime+0xc4>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4a20      	ldr	r2, [pc, #128]	; (8004c24 <USB_SetTurnaroundTime+0x13c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d802      	bhi.n	8004bac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	e015      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <USB_SetTurnaroundTime+0x13c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d906      	bls.n	8004bc2 <USB_SetTurnaroundTime+0xda>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <USB_SetTurnaroundTime+0x140>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d802      	bhi.n	8004bc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004bbc:	2307      	movs	r3, #7
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e00a      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	e007      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bce:	2309      	movs	r3, #9
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e001      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004bd4:	2309      	movs	r3, #9
 8004bd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	029b      	lsls	r3, r3, #10
 8004bec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	00d8acbf 	.word	0x00d8acbf
 8004c08:	00e4e1bf 	.word	0x00e4e1bf
 8004c0c:	00f423ff 	.word	0x00f423ff
 8004c10:	0106737f 	.word	0x0106737f
 8004c14:	011a499f 	.word	0x011a499f
 8004c18:	01312cff 	.word	0x01312cff
 8004c1c:	014ca43f 	.word	0x014ca43f
 8004c20:	016e35ff 	.word	0x016e35ff
 8004c24:	01a6ab1f 	.word	0x01a6ab1f
 8004c28:	01e847ff 	.word	0x01e847ff

08004c2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f043 0201 	orr.w	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 0201 	bic.w	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d106      	bne.n	8004c9c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	e00b      	b.n	8004cb4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	e001      	b.n	8004cb4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e003      	b.n	8004cbc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004cb4:	2032      	movs	r0, #50	; 0x32
 8004cb6:	f7fc fbcb 	bl	8001450 <HAL_Delay>

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e009      	b.n	8004cf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	3340      	adds	r3, #64	; 0x40
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	2200      	movs	r2, #0
 8004cf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b0e      	cmp	r3, #14
 8004cfc:	d9f2      	bls.n	8004ce4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11c      	bne.n	8004d3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d12:	f043 0302 	orr.w	r3, r3, #2
 8004d16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d3c:	e00b      	b.n	8004d56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d68:	4619      	mov	r1, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d70:	461a      	mov	r2, r3
 8004d72:	680b      	ldr	r3, [r1, #0]
 8004d74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10c      	bne.n	8004d96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d82:	2100      	movs	r1, #0
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f949 	bl	800501c <USB_SetDevSpeed>
 8004d8a:	e008      	b.n	8004d9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f944 	bl	800501c <USB_SetDevSpeed>
 8004d94:	e003      	b.n	8004d9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d96:	2103      	movs	r1, #3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f93f 	bl	800501c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d9e:	2110      	movs	r1, #16
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8f3 	bl	8004f8c <USB_FlushTxFifo>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f911 	bl	8004fd8 <USB_FlushRxFifo>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2300      	movs	r3, #0
 8004dca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	461a      	mov	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e043      	b.n	8004e72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e00:	d118      	bne.n	8004e34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	461a      	mov	r2, r3
 8004e16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	e013      	b.n	8004e46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e008      	b.n	8004e46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	461a      	mov	r2, r3
 8004e42:	2300      	movs	r3, #0
 8004e44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	461a      	mov	r2, r3
 8004e54:	2300      	movs	r3, #0
 8004e56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	461a      	mov	r2, r3
 8004e66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3b7      	bcc.n	8004dea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	e043      	b.n	8004f08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e96:	d118      	bne.n	8004eca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e013      	b.n	8004edc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e008      	b.n	8004edc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2300      	movs	r3, #0
 8004eec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	461a      	mov	r2, r3
 8004efc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3301      	adds	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d3b7      	bcc.n	8004e80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f043 0210 	orr.w	r2, r3, #16
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699a      	ldr	r2, [r3, #24]
 8004f48:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <USB_DevInit+0x2c4>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f043 0208 	orr.w	r2, r3, #8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f84:	b004      	add	sp, #16
 8004f86:	4770      	bx	lr
 8004f88:	803c3800 	.word	0x803c3800

08004f8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	019b      	lsls	r3, r3, #6
 8004f9e:	f043 0220 	orr.w	r2, r3, #32
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <USB_FlushTxFifo+0x48>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e006      	b.n	8004fc6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d0f0      	beq.n	8004fa6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	00030d40 	.word	0x00030d40

08004fd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <USB_FlushRxFifo+0x40>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e006      	b.n	800500a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d0f0      	beq.n	8004fea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	00030d40 	.word	0x00030d40

0800501c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800504e:	b480      	push	{r7}
 8005050:	b087      	sub	sp, #28
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0306 	and.w	r3, r3, #6
 8005066:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800506e:	2300      	movs	r3, #0
 8005070:	75fb      	strb	r3, [r7, #23]
 8005072:	e00a      	b.n	800508a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d002      	beq.n	8005080 <USB_GetDevSpeed+0x32>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b06      	cmp	r3, #6
 800507e:	d102      	bne.n	8005086 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005080:	2302      	movs	r3, #2
 8005082:	75fb      	strb	r3, [r7, #23]
 8005084:	e001      	b.n	800508a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005086:	230f      	movs	r3, #15
 8005088:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800508a:	7dfb      	ldrb	r3, [r7, #23]
}
 800508c:	4618      	mov	r0, r3
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d13a      	bne.n	800512a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	2101      	movs	r1, #1
 80050c6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	68f9      	ldr	r1, [r7, #12]
 80050ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d155      	bne.n	8005198 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	78db      	ldrb	r3, [r3, #3]
 8005106:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005108:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	059b      	lsls	r3, r3, #22
 800510e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005110:	4313      	orrs	r3, r2
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	e036      	b.n	8005198 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f303 	lsl.w	r3, r1, r3
 8005140:	041b      	lsls	r3, r3, #16
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005148:	4313      	orrs	r3, r2
 800514a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11a      	bne.n	8005198 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	78db      	ldrb	r3, [r3, #3]
 800517c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800517e:	430b      	orrs	r3, r1
 8005180:	4313      	orrs	r3, r2
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	440a      	add	r2, r1
 800518a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d161      	bne.n	8005288 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051da:	d11f      	bne.n	800521c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800521a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	2101      	movs	r1, #1
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	b29b      	uxth	r3, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800523c:	4013      	ands	r3, r2
 800523e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	2101      	movs	r1, #1
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	43db      	mvns	r3, r3
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005260:	4013      	ands	r3, r2
 8005262:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	0159      	lsls	r1, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	440b      	add	r3, r1
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	4619      	mov	r1, r3
 8005280:	4b35      	ldr	r3, [pc, #212]	; (8005358 <USB_DeactivateEndpoint+0x1b0>)
 8005282:	4013      	ands	r3, r2
 8005284:	600b      	str	r3, [r1, #0]
 8005286:	e060      	b.n	800534a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800529a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529e:	d11f      	bne.n	80052e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	2101      	movs	r1, #1
 80052f2:	fa01 f303 	lsl.w	r3, r1, r3
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	43db      	mvns	r3, r3
 80052fa:	68f9      	ldr	r1, [r7, #12]
 80052fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005300:	4013      	ands	r3, r2
 8005302:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	2101      	movs	r1, #1
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	43db      	mvns	r3, r3
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005324:	4013      	ands	r3, r2
 8005326:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	0159      	lsls	r1, r3, #5
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	440b      	add	r3, r1
 800533e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005342:	4619      	mov	r1, r3
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <USB_DeactivateEndpoint+0x1b4>)
 8005346:	4013      	ands	r3, r2
 8005348:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	ec337800 	.word	0xec337800
 800535c:	eff37800 	.word	0xeff37800

08005360 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	4613      	mov	r3, r2
 800536c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 815c 	bne.w	800563a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d132      	bne.n	80053f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e8:	0cdb      	lsrs	r3, r3, #19
 80053ea:	04db      	lsls	r3, r3, #19
 80053ec:	6113      	str	r3, [r2, #16]
 80053ee:	e074      	b.n	80054da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540a:	0cdb      	lsrs	r3, r3, #19
 800540c:	04db      	lsls	r3, r3, #19
 800540e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800542e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6959      	ldr	r1, [r3, #20]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	440b      	add	r3, r1
 800544c:	1e59      	subs	r1, r3, #1
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	fbb1 f3f3 	udiv	r3, r1, r3
 8005456:	04d9      	lsls	r1, r3, #19
 8005458:	4b9d      	ldr	r3, [pc, #628]	; (80056d0 <USB_EPStartXfer+0x370>)
 800545a:	400b      	ands	r3, r1
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	0148      	lsls	r0, r1, #5
 8005460:	69f9      	ldr	r1, [r7, #28]
 8005462:	4401      	add	r1, r0
 8005464:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005468:	4313      	orrs	r3, r2
 800546a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005482:	69b9      	ldr	r1, [r7, #24]
 8005484:	0148      	lsls	r0, r1, #5
 8005486:	69f9      	ldr	r1, [r7, #28]
 8005488:	4401      	add	r1, r0
 800548a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800548e:	4313      	orrs	r3, r2
 8005490:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	78db      	ldrb	r3, [r3, #3]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d11f      	bne.n	80054da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d14b      	bne.n	8005578 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	461a      	mov	r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	78db      	ldrb	r3, [r3, #3]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d128      	bne.n	8005556 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d110      	bne.n	8005536 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	e00f      	b.n	8005556 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005554:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e12f      	b.n	80057d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005596:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	78db      	ldrb	r3, [r3, #3]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d015      	beq.n	80055cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8117 	beq.w	80057d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	2101      	movs	r1, #1
 80055bc:	fa01 f303 	lsl.w	r3, r1, r3
 80055c0:	69f9      	ldr	r1, [r7, #28]
 80055c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c6:	4313      	orrs	r3, r2
 80055c8:	634b      	str	r3, [r1, #52]	; 0x34
 80055ca:	e105      	b.n	80057d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d110      	bne.n	80055fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	e00f      	b.n	800561e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	68d9      	ldr	r1, [r3, #12]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	b298      	uxth	r0, r3
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	4603      	mov	r3, r0
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fa2b 	bl	8005a8e <USB_WritePacket>
 8005638:	e0ce      	b.n	80057d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005654:	0cdb      	lsrs	r3, r3, #19
 8005656:	04db      	lsls	r3, r3, #19
 8005658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005674:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005678:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800567c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d126      	bne.n	80056d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800569c:	69b9      	ldr	r1, [r7, #24]
 800569e:	0148      	lsls	r0, r1, #5
 80056a0:	69f9      	ldr	r1, [r7, #28]
 80056a2:	4401      	add	r1, r0
 80056a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056a8:	4313      	orrs	r3, r2
 80056aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ca:	6113      	str	r3, [r2, #16]
 80056cc:	e036      	b.n	800573c <USB_EPStartXfer+0x3dc>
 80056ce:	bf00      	nop
 80056d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	4413      	add	r3, r2
 80056de:	1e5a      	subs	r2, r3, #1
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	8afb      	ldrh	r3, [r7, #22]
 80056fa:	04d9      	lsls	r1, r3, #19
 80056fc:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <USB_EPStartXfer+0x484>)
 80056fe:	400b      	ands	r3, r1
 8005700:	69b9      	ldr	r1, [r7, #24]
 8005702:	0148      	lsls	r0, r1, #5
 8005704:	69f9      	ldr	r1, [r7, #28]
 8005706:	4401      	add	r1, r0
 8005708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800570c:	4313      	orrs	r3, r2
 800570e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	8af9      	ldrh	r1, [r7, #22]
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572c:	69b9      	ldr	r1, [r7, #24]
 800572e:	0148      	lsls	r0, r1, #5
 8005730:	69f9      	ldr	r1, [r7, #28]
 8005732:	4401      	add	r1, r0
 8005734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005738:	4313      	orrs	r3, r2
 800573a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10d      	bne.n	800575e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	68d9      	ldr	r1, [r3, #12]
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	460a      	mov	r2, r1
 800575c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	78db      	ldrb	r3, [r3, #3]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d128      	bne.n	80057b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005772:	2b00      	cmp	r3, #0
 8005774:	d110      	bne.n	8005798 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e00f      	b.n	80057b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	0151      	lsls	r1, r2, #5
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	440a      	add	r2, r1
 80057ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	1ff80000 	.word	0x1ff80000

080057e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 80cd 	bne.w	80059a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d132      	bne.n	8005878 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005870:	0cdb      	lsrs	r3, r3, #19
 8005872:	04db      	lsls	r3, r3, #19
 8005874:	6113      	str	r3, [r2, #16]
 8005876:	e04e      	b.n	8005916 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005892:	0cdb      	lsrs	r3, r3, #19
 8005894:	04db      	lsls	r3, r3, #19
 8005896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d903      	bls.n	80058d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	0148      	lsls	r0, r1, #5
 800590a:	6979      	ldr	r1, [r7, #20]
 800590c:	4401      	add	r1, r0
 800590e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005912:	4313      	orrs	r3, r2
 8005914:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d11e      	bne.n	800595a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d009      	beq.n	8005938 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	461a      	mov	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	e092      	b.n	8005a80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005978:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d07e      	beq.n	8005a80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	2101      	movs	r1, #1
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	6979      	ldr	r1, [r7, #20]
 800599a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599e:	4313      	orrs	r3, r2
 80059a0:	634b      	str	r3, [r1, #52]	; 0x34
 80059a2:	e06d      	b.n	8005a80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059be:	0cdb      	lsrs	r3, r3, #19
 80059c0:	04db      	lsls	r3, r3, #19
 80059c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a2e:	6939      	ldr	r1, [r7, #16]
 8005a30:	0148      	lsls	r0, r1, #5
 8005a32:	6979      	ldr	r1, [r7, #20]
 8005a34:	4401      	add	r1, r0
 8005a36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d10d      	bne.n	8005a60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d009      	beq.n	8005a60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	68d9      	ldr	r1, [r3, #12]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	460a      	mov	r2, r1
 8005a5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b089      	sub	sp, #36	; 0x24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	4611      	mov	r1, r2
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	71fb      	strb	r3, [r7, #7]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005aac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11a      	bne.n	8005aea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ab4:	88bb      	ldrh	r3, [r7, #4]
 8005ab6:	3303      	adds	r3, #3
 8005ab8:	089b      	lsrs	r3, r3, #2
 8005aba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	e00f      	b.n	8005ae2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	031a      	lsls	r2, r3, #12
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ace:	461a      	mov	r2, r3
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d3eb      	bcc.n	8005ac2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3724      	adds	r7, #36	; 0x24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b089      	sub	sp, #36	; 0x24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	3303      	adds	r3, #3
 8005b12:	089b      	lsrs	r3, r3, #2
 8005b14:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e00b      	b.n	8005b34 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	3301      	adds	r3, #1
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d3ef      	bcc.n	8005b1c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b3c:	69fb      	ldr	r3, [r7, #28]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3724      	adds	r7, #36	; 0x24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	785b      	ldrb	r3, [r3, #1]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d12c      	bne.n	8005bc0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	db12      	blt.n	8005b9e <USB_EPSetStall+0x54>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00f      	beq.n	8005b9e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b9c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e02b      	b.n	8005c18 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	db12      	blt.n	8005bf8 <USB_EPSetStall+0xae>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00f      	beq.n	8005bf8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bf6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d128      	bne.n	8005c94 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	78db      	ldrb	r3, [r3, #3]
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d003      	beq.n	8005c72 <USB_EPClearStall+0x4c>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	78db      	ldrb	r3, [r3, #3]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d138      	bne.n	8005ce4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e027      	b.n	8005ce4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	78db      	ldrb	r3, [r3, #3]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d003      	beq.n	8005cc4 <USB_EPClearStall+0x9e>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	78db      	ldrb	r3, [r3, #3]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d10f      	bne.n	8005ce4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d14:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d58:	f023 0303 	bic.w	r3, r3, #3
 8005d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d6c:	f023 0302 	bic.w	r3, r3, #2
 8005d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dae:	f043 0302 	orr.w	r3, r3, #2
 8005db2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005dda:	68fb      	ldr	r3, [r7, #12]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	0c1b      	lsrs	r3, r3, #16
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	b29b      	uxth	r3, r3
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebc:	01db      	lsls	r3, r3, #7
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005eda:	68bb      	ldr	r3, [r7, #8]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	460b      	mov	r3, r1
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	333c      	adds	r3, #60	; 0x3c
 8005f62:	3304      	adds	r3, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	4a26      	ldr	r2, [pc, #152]	; (8006004 <USB_EP0_OutStart+0xb8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d90a      	bls.n	8005f86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f80:	d101      	bne.n	8005f86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	e037      	b.n	8005ff6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	2300      	movs	r3, #0
 8005f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb4:	f043 0318 	orr.w	r3, r3, #24
 8005fb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005fcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fce:	7afb      	ldrb	r3, [r7, #11]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d10f      	bne.n	8005ff4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	4f54300a 	.word	0x4f54300a

08006008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a13      	ldr	r2, [pc, #76]	; (800606c <USB_CoreReset+0x64>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e01b      	b.n	800605e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	daf2      	bge.n	8006014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f043 0201 	orr.w	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a09      	ldr	r2, [pc, #36]	; (800606c <USB_CoreReset+0x64>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d901      	bls.n	8006050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e006      	b.n	800605e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b01      	cmp	r3, #1
 800605a:	d0f0      	beq.n	800603e <USB_CoreReset+0x36>

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	00030d40 	.word	0x00030d40

08006070 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800607c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006080:	f002 f930 	bl	80082e4 <malloc>
 8006084:	4603      	mov	r3, r0
 8006086:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d105      	bne.n	800609a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006096:	2302      	movs	r3, #2
 8006098:	e066      	b.n	8006168 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7c1b      	ldrb	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d119      	bne.n	80060de <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ae:	2202      	movs	r2, #2
 80060b0:	2181      	movs	r1, #129	; 0x81
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 ff9d 	bl	8007ff2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060c2:	2202      	movs	r2, #2
 80060c4:	2101      	movs	r1, #1
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 ff93 	bl	8007ff2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2210      	movs	r2, #16
 80060d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80060dc:	e016      	b.n	800610c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060de:	2340      	movs	r3, #64	; 0x40
 80060e0:	2202      	movs	r2, #2
 80060e2:	2181      	movs	r1, #129	; 0x81
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 ff84 	bl	8007ff2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060f0:	2340      	movs	r3, #64	; 0x40
 80060f2:	2202      	movs	r2, #2
 80060f4:	2101      	movs	r1, #1
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 ff7b 	bl	8007ff2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2210      	movs	r2, #16
 8006108:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800610c:	2308      	movs	r3, #8
 800610e:	2203      	movs	r2, #3
 8006110:	2182      	movs	r1, #130	; 0x82
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 ff6d 	bl	8007ff2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	7c1b      	ldrb	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d109      	bne.n	8006156 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800614c:	2101      	movs	r1, #1
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f002 f83e 	bl	80081d0 <USBD_LL_PrepareReceive>
 8006154:	e007      	b.n	8006166 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800615c:	2340      	movs	r3, #64	; 0x40
 800615e:	2101      	movs	r1, #1
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f002 f835 	bl	80081d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006180:	2181      	movs	r1, #129	; 0x81
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 ff5b 	bl	800803e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800618e:	2101      	movs	r1, #1
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 ff54 	bl	800803e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800619e:	2182      	movs	r1, #130	; 0x82
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 ff4c 	bl	800803e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00e      	beq.n	80061de <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d0:	4618      	mov	r0, r3
 80061d2:	f002 f88f 	bl	80082f4 <free>
    pdev->pClassData = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061f8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800620e:	2b00      	cmp	r3, #0
 8006210:	d03a      	beq.n	8006288 <USBD_CDC_Setup+0xa0>
 8006212:	2b20      	cmp	r3, #32
 8006214:	f040 8097 	bne.w	8006346 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	88db      	ldrh	r3, [r3, #6]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d029      	beq.n	8006274 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b25b      	sxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	da11      	bge.n	800624e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006236:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	88d2      	ldrh	r2, [r2, #6]
 800623c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800623e:	6939      	ldr	r1, [r7, #16]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	88db      	ldrh	r3, [r3, #6]
 8006244:	461a      	mov	r2, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 fa9d 	bl	8007786 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800624c:	e082      	b.n	8006354 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	785a      	ldrb	r2, [r3, #1]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	88db      	ldrh	r3, [r3, #6]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006264:	6939      	ldr	r1, [r7, #16]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	88db      	ldrh	r3, [r3, #6]
 800626a:	461a      	mov	r2, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f001 fab6 	bl	80077de <USBD_CtlPrepareRx>
    break;
 8006272:	e06f      	b.n	8006354 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	7850      	ldrb	r0, [r2, #1]
 8006280:	2200      	movs	r2, #0
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	4798      	blx	r3
    break;
 8006286:	e065      	b.n	8006354 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b0b      	cmp	r3, #11
 800628e:	d84f      	bhi.n	8006330 <USBD_CDC_Setup+0x148>
 8006290:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <USBD_CDC_Setup+0xb0>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062c9 	.word	0x080062c9
 800629c:	0800633f 	.word	0x0800633f
 80062a0:	08006331 	.word	0x08006331
 80062a4:	08006331 	.word	0x08006331
 80062a8:	08006331 	.word	0x08006331
 80062ac:	08006331 	.word	0x08006331
 80062b0:	08006331 	.word	0x08006331
 80062b4:	08006331 	.word	0x08006331
 80062b8:	08006331 	.word	0x08006331
 80062bc:	08006331 	.word	0x08006331
 80062c0:	080062f1 	.word	0x080062f1
 80062c4:	08006319 	.word	0x08006319
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d107      	bne.n	80062e2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062d2:	f107 030c 	add.w	r3, r7, #12
 80062d6:	2202      	movs	r2, #2
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f001 fa53 	bl	8007786 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80062e0:	e030      	b.n	8006344 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 f9dd 	bl	80076a4 <USBD_CtlError>
        ret = USBD_FAIL;
 80062ea:	2303      	movs	r3, #3
 80062ec:	75fb      	strb	r3, [r7, #23]
      break;
 80062ee:	e029      	b.n	8006344 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d107      	bne.n	800630a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062fa:	f107 030f 	add.w	r3, r7, #15
 80062fe:	2201      	movs	r2, #1
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fa3f 	bl	8007786 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006308:	e01c      	b.n	8006344 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 f9c9 	bl	80076a4 <USBD_CtlError>
        ret = USBD_FAIL;
 8006312:	2303      	movs	r3, #3
 8006314:	75fb      	strb	r3, [r7, #23]
      break;
 8006316:	e015      	b.n	8006344 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	2b03      	cmp	r3, #3
 8006320:	d00f      	beq.n	8006342 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 f9bd 	bl	80076a4 <USBD_CtlError>
        ret = USBD_FAIL;
 800632a:	2303      	movs	r3, #3
 800632c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800632e:	e008      	b.n	8006342 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 f9b6 	bl	80076a4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006338:	2303      	movs	r3, #3
 800633a:	75fb      	strb	r3, [r7, #23]
      break;
 800633c:	e002      	b.n	8006344 <USBD_CDC_Setup+0x15c>
      break;
 800633e:	bf00      	nop
 8006340:	e008      	b.n	8006354 <USBD_CDC_Setup+0x16c>
      break;
 8006342:	bf00      	nop
    }
    break;
 8006344:	e006      	b.n	8006354 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f9ab 	bl	80076a4 <USBD_CtlError>
    ret = USBD_FAIL;
 800634e:	2303      	movs	r3, #3
 8006350:	75fb      	strb	r3, [r7, #23]
    break;
 8006352:	bf00      	nop
  }

  return (uint8_t)ret;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop

08006360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800637e:	2303      	movs	r3, #3
 8006380:	e049      	b.n	8006416 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006388:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800638a:	78fa      	ldrb	r2, [r7, #3]
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	440b      	add	r3, r1
 8006398:	3318      	adds	r3, #24
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d029      	beq.n	80063f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	3318      	adds	r3, #24
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	78f9      	ldrb	r1, [r7, #3]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	460b      	mov	r3, r1
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	1a5b      	subs	r3, r3, r1
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4403      	add	r3, r0
 80063c0:	3344      	adds	r3, #68	; 0x44
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80063c8:	fb03 f301 	mul.w	r3, r3, r1
 80063cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d110      	bne.n	80063f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	3318      	adds	r3, #24
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063e6:	78f9      	ldrb	r1, [r7, #3]
 80063e8:	2300      	movs	r3, #0
 80063ea:	2200      	movs	r2, #0
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 fece 	bl	800818e <USBD_LL_Transmit>
 80063f2:	e00f      	b.n	8006414 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006410:	78fa      	ldrb	r2, [r7, #3]
 8006412:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006430:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e015      	b.n	800646c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 fee4 	bl	8008212 <USBD_LL_GetRxDataSize>
 800644a:	4602      	mov	r2, r0
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006466:	4611      	mov	r1, r2
 8006468:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006482:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d015      	beq.n	80064ba <USBD_CDC_EP0_RxReady+0x46>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006494:	2bff      	cmp	r3, #255	; 0xff
 8006496:	d010      	beq.n	80064ba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80064a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064ae:	b292      	uxth	r2, r2
 80064b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	22ff      	movs	r2, #255	; 0xff
 80064b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2243      	movs	r2, #67	; 0x43
 80064d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80064d2:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	20000094 	.word	0x20000094

080064e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2243      	movs	r2, #67	; 0x43
 80064f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80064f2:	4b03      	ldr	r3, [pc, #12]	; (8006500 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	20000050 	.word	0x20000050

08006504 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2243      	movs	r2, #67	; 0x43
 8006510:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006512:	4b03      	ldr	r3, [pc, #12]	; (8006520 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	200000d8 	.word	0x200000d8

08006524 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	220a      	movs	r2, #10
 8006530:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006532:	4b03      	ldr	r3, [pc, #12]	; (8006540 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	2000000c 	.word	0x2000000c

08006544 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006554:	2303      	movs	r3, #3
 8006556:	e004      	b.n	8006562 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800656e:	b480      	push	{r7}
 8006570:	b087      	sub	sp, #28
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006580:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065b0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e01a      	b.n	8006620 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d114      	bne.n	800661e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006612:	2181      	movs	r1, #129	; 0x81
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fdba 	bl	800818e <USBD_LL_Transmit>

    ret = USBD_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006636:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006642:	2303      	movs	r3, #3
 8006644:	e016      	b.n	8006674 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	7c1b      	ldrb	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006658:	2101      	movs	r1, #1
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 fdb8 	bl	80081d0 <USBD_LL_PrepareReceive>
 8006660:	e007      	b.n	8006672 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006668:	2340      	movs	r3, #64	; 0x40
 800666a:	2101      	movs	r1, #1
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fdaf 	bl	80081d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006690:	2303      	movs	r3, #3
 8006692:	e025      	b.n	80066e0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	79fa      	ldrb	r2, [r7, #7]
 80066d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f001 fc25 	bl	8007f24 <USBD_LL_Init>
 80066da:	4603      	mov	r3, r0
 80066dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e010      	b.n	8006722 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	f107 020e 	add.w	r2, r7, #14
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	4602      	mov	r2, r0
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 fc42 	bl	8007fbc <USBD_LL_Start>
 8006738:	4603      	mov	r3, r0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	4611      	mov	r1, r2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	4611      	mov	r1, r2
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
  }

  return USBD_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 ff2c 	bl	8007630 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80067e6:	461a      	mov	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d00e      	beq.n	800681a <USBD_LL_SetupStage+0x5a>
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d302      	bcc.n	8006806 <USBD_LL_SetupStage+0x46>
 8006800:	2b02      	cmp	r3, #2
 8006802:	d014      	beq.n	800682e <USBD_LL_SetupStage+0x6e>
 8006804:	e01d      	b.n	8006842 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa18 	bl	8006c44 <USBD_StdDevReq>
 8006814:	4603      	mov	r3, r0
 8006816:	73fb      	strb	r3, [r7, #15]
      break;
 8006818:	e020      	b.n	800685c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa7c 	bl	8006d20 <USBD_StdItfReq>
 8006828:	4603      	mov	r3, r0
 800682a:	73fb      	strb	r3, [r7, #15]
      break;
 800682c:	e016      	b.n	800685c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fab8 	bl	8006dac <USBD_StdEPReq>
 800683c:	4603      	mov	r3, r0
 800683e:	73fb      	strb	r3, [r7, #15]
      break;
 8006840:	e00c      	b.n	800685c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006848:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800684c:	b2db      	uxtb	r3, r3
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fc13 	bl	800807c <USBD_LL_StallEP>
 8006856:	4603      	mov	r3, r0
 8006858:	73fb      	strb	r3, [r7, #15]
      break;
 800685a:	bf00      	nop
  }

  return ret;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	460b      	mov	r3, r1
 8006870:	607a      	str	r2, [r7, #4]
 8006872:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006874:	7afb      	ldrb	r3, [r7, #11]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d137      	bne.n	80068ea <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006880:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006888:	2b03      	cmp	r3, #3
 800688a:	d14a      	bne.n	8006922 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	429a      	cmp	r2, r3
 8006896:	d913      	bls.n	80068c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	1ad2      	subs	r2, r2, r3
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	4293      	cmp	r3, r2
 80068b0:	bf28      	it	cs
 80068b2:	4613      	movcs	r3, r2
 80068b4:	461a      	mov	r2, r3
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 ffad 	bl	8007818 <USBD_CtlContinueRx>
 80068be:	e030      	b.n	8006922 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d105      	bne.n	80068e2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 ffa9 	bl	800783a <USBD_CtlSendStatus>
 80068e8:	e01b      	b.n	8006922 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d013      	beq.n	800691e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d10e      	bne.n	800691e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	7afa      	ldrb	r2, [r7, #11]
 800690a:	4611      	mov	r1, r2
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	4798      	blx	r3
 8006910:	4603      	mov	r3, r0
 8006912:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	e002      	b.n	8006924 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800691e:	2303      	movs	r3, #3
 8006920:	e000      	b.n	8006924 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	460b      	mov	r3, r1
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d16a      	bne.n	8006a16 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3314      	adds	r3, #20
 8006944:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800694c:	2b02      	cmp	r3, #2
 800694e:	d155      	bne.n	80069fc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	429a      	cmp	r2, r3
 800695a:	d914      	bls.n	8006986 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	1ad2      	subs	r2, r2, r3
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	461a      	mov	r2, r3
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 ff22 	bl	80077bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006978:	2300      	movs	r3, #0
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f001 fc26 	bl	80081d0 <USBD_LL_PrepareReceive>
 8006984:	e03a      	b.n	80069fc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	d11c      	bne.n	80069cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800699a:	429a      	cmp	r2, r3
 800699c:	d316      	bcc.n	80069cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d20f      	bcs.n	80069cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069ac:	2200      	movs	r2, #0
 80069ae:	2100      	movs	r1, #0
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 ff03 	bl	80077bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069be:	2300      	movs	r3, #0
 80069c0:	2200      	movs	r2, #0
 80069c2:	2100      	movs	r1, #0
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f001 fc03 	bl	80081d0 <USBD_LL_PrepareReceive>
 80069ca:	e017      	b.n	80069fc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d105      	bne.n	80069ee <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ee:	2180      	movs	r1, #128	; 0x80
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f001 fb43 	bl	800807c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 ff32 	bl	8007860 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d123      	bne.n	8006a4e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fe9b 	bl	8006742 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a14:	e01b      	b.n	8006a4e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d013      	beq.n	8006a4a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d10e      	bne.n	8006a4a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	7afa      	ldrb	r2, [r7, #11]
 8006a36:	4611      	mov	r1, r2
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	4798      	blx	r3
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
 8006a48:	e002      	b.n	8006a50 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e000      	b.n	8006a50 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d009      	beq.n	8006a9c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6852      	ldr	r2, [r2, #4]
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	4611      	mov	r1, r2
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a9c:	2340      	movs	r3, #64	; 0x40
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 faa5 	bl	8007ff2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2240      	movs	r2, #64	; 0x40
 8006ab4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ab8:	2340      	movs	r3, #64	; 0x40
 8006aba:	2200      	movs	r2, #0
 8006abc:	2180      	movs	r1, #128	; 0x80
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 fa97 	bl	8007ff2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2240      	movs	r2, #64	; 0x40
 8006ace:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2204      	movs	r2, #4
 8006b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d105      	bne.n	8006b42 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d10b      	bne.n	8006b7a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6852      	ldr	r2, [r2, #4]
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
  }

  return USBD_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b087      	sub	sp, #28
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c24:	8a3b      	ldrh	r3, [r7, #16]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	b21a      	sxth	r2, r3
 8006c2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	b21b      	sxth	r3, r3
 8006c32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c34:	89fb      	ldrh	r3, [r7, #14]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d004      	beq.n	8006c68 <USBD_StdDevReq+0x24>
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d002      	beq.n	8006c68 <USBD_StdDevReq+0x24>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <USBD_StdDevReq+0x38>
 8006c66:	e050      	b.n	8006d0a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]
    break;
 8006c7a:	e04b      	b.n	8006d14 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b09      	cmp	r3, #9
 8006c82:	d83c      	bhi.n	8006cfe <USBD_StdDevReq+0xba>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <USBD_StdDevReq+0x48>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006ce1 	.word	0x08006ce1
 8006c90:	08006cf5 	.word	0x08006cf5
 8006c94:	08006cff 	.word	0x08006cff
 8006c98:	08006ceb 	.word	0x08006ceb
 8006c9c:	08006cff 	.word	0x08006cff
 8006ca0:	08006cbf 	.word	0x08006cbf
 8006ca4:	08006cb5 	.word	0x08006cb5
 8006ca8:	08006cff 	.word	0x08006cff
 8006cac:	08006cd7 	.word	0x08006cd7
 8006cb0:	08006cc9 	.word	0x08006cc9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9ce 	bl	8007058 <USBD_GetDescriptor>
      break;
 8006cbc:	e024      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb33 	bl	800732c <USBD_SetAddress>
      break;
 8006cc6:	e01f      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fb70 	bl	80073b0 <USBD_SetConfig>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd4:	e018      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fc0d 	bl	80074f8 <USBD_GetConfig>
      break;
 8006cde:	e013      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fc3c 	bl	8007560 <USBD_GetStatus>
      break;
 8006ce8:	e00e      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fc6a 	bl	80075c6 <USBD_SetFeature>
      break;
 8006cf2:	e009      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fc79 	bl	80075ee <USBD_ClrFeature>
      break;
 8006cfc:	e004      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fccf 	bl	80076a4 <USBD_CtlError>
      break;
 8006d06:	bf00      	nop
    }
    break;
 8006d08:	e004      	b.n	8006d14 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fcc9 	bl	80076a4 <USBD_CtlError>
    break;
 8006d12:	bf00      	nop
  }

  return ret;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop

08006d20 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d003      	beq.n	8006d42 <USBD_StdItfReq+0x22>
 8006d3a:	2b40      	cmp	r3, #64	; 0x40
 8006d3c:	d001      	beq.n	8006d42 <USBD_StdItfReq+0x22>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d12a      	bne.n	8006d98 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d81d      	bhi.n	8006d8a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	889b      	ldrh	r3, [r3, #4]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d813      	bhi.n	8006d80 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	88db      	ldrh	r3, [r3, #6]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d110      	bne.n	8006d94 <USBD_StdItfReq+0x74>
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10d      	bne.n	8006d94 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fd5e 	bl	800783a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006d7e:	e009      	b.n	8006d94 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fc8e 	bl	80076a4 <USBD_CtlError>
      break;
 8006d88:	e004      	b.n	8006d94 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fc89 	bl	80076a4 <USBD_CtlError>
      break;
 8006d92:	e000      	b.n	8006d96 <USBD_StdItfReq+0x76>
      break;
 8006d94:	bf00      	nop
    }
    break;
 8006d96:	e004      	b.n	8006da2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fc82 	bl	80076a4 <USBD_CtlError>
    break;
 8006da0:	bf00      	nop
  }

  return ret;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	889b      	ldrh	r3, [r3, #4]
 8006dbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d004      	beq.n	8006dd6 <USBD_StdEPReq+0x2a>
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	d002      	beq.n	8006dd6 <USBD_StdEPReq+0x2a>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <USBD_StdEPReq+0x3e>
 8006dd4:	e135      	b.n	8007042 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
 8006de4:	4603      	mov	r3, r0
 8006de6:	73fb      	strb	r3, [r7, #15]
    break;
 8006de8:	e130      	b.n	800704c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d03e      	beq.n	8006e70 <USBD_StdEPReq+0xc4>
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d002      	beq.n	8006dfc <USBD_StdEPReq+0x50>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d077      	beq.n	8006eea <USBD_StdEPReq+0x13e>
 8006dfa:	e11c      	b.n	8007036 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d002      	beq.n	8006e0c <USBD_StdEPReq+0x60>
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d015      	beq.n	8006e36 <USBD_StdEPReq+0x8a>
 8006e0a:	e02b      	b.n	8006e64 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <USBD_StdEPReq+0x80>
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b80      	cmp	r3, #128	; 0x80
 8006e16:	d009      	beq.n	8006e2c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 f92d 	bl	800807c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e22:	2180      	movs	r1, #128	; 0x80
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 f929 	bl	800807c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e2a:	e020      	b.n	8006e6e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fc38 	bl	80076a4 <USBD_CtlError>
        break;
 8006e34:	e01b      	b.n	8006e6e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	885b      	ldrh	r3, [r3, #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10e      	bne.n	8006e5c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <USBD_StdEPReq+0xb0>
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	2b80      	cmp	r3, #128	; 0x80
 8006e48:	d008      	beq.n	8006e5c <USBD_StdEPReq+0xb0>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	88db      	ldrh	r3, [r3, #6]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 f910 	bl	800807c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fcec 	bl	800783a <USBD_CtlSendStatus>

        break;
 8006e62:	e004      	b.n	8006e6e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fc1c 	bl	80076a4 <USBD_CtlError>
        break;
 8006e6c:	bf00      	nop
      }
      break;
 8006e6e:	e0e7      	b.n	8007040 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d002      	beq.n	8006e80 <USBD_StdEPReq+0xd4>
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d015      	beq.n	8006eaa <USBD_StdEPReq+0xfe>
 8006e7e:	e02d      	b.n	8006edc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00c      	beq.n	8006ea0 <USBD_StdEPReq+0xf4>
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	2b80      	cmp	r3, #128	; 0x80
 8006e8a:	d009      	beq.n	8006ea0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f8f3 	bl	800807c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e96:	2180      	movs	r1, #128	; 0x80
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 f8ef 	bl	800807c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e9e:	e023      	b.n	8006ee8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fbfe 	bl	80076a4 <USBD_CtlError>
        break;
 8006ea8:	e01e      	b.n	8006ee8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	885b      	ldrh	r3, [r3, #2]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d119      	bne.n	8006ee6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 f8fa 	bl	80080ba <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fcb7 	bl	800783a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3
        }
        break;
 8006eda:	e004      	b.n	8006ee6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fbe0 	bl	80076a4 <USBD_CtlError>
        break;
 8006ee4:	e000      	b.n	8006ee8 <USBD_StdEPReq+0x13c>
        break;
 8006ee6:	bf00      	nop
      }
      break;
 8006ee8:	e0aa      	b.n	8007040 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d002      	beq.n	8006efa <USBD_StdEPReq+0x14e>
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d032      	beq.n	8006f5e <USBD_StdEPReq+0x1b2>
 8006ef8:	e097      	b.n	800702a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <USBD_StdEPReq+0x164>
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b80      	cmp	r3, #128	; 0x80
 8006f04:	d004      	beq.n	8006f10 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fbcb 	bl	80076a4 <USBD_CtlError>
          break;
 8006f0e:	e091      	b.n	8007034 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	da0b      	bge.n	8006f30 <USBD_StdEPReq+0x184>
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	3310      	adds	r3, #16
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	e00b      	b.n	8006f48 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4413      	add	r3, r2
 8006f46:	3304      	adds	r3, #4
 8006f48:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2202      	movs	r2, #2
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fc15 	bl	8007786 <USBD_CtlSendData>
        break;
 8006f5c:	e06a      	b.n	8007034 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	da11      	bge.n	8006f8a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	3324      	adds	r3, #36	; 0x24
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d117      	bne.n	8006fb0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fb8e 	bl	80076a4 <USBD_CtlError>
            break;
 8006f88:	e054      	b.n	8007034 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	f003 020f 	and.w	r2, r3, #15
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d104      	bne.n	8006fb0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fb7b 	bl	80076a4 <USBD_CtlError>
            break;
 8006fae:	e041      	b.n	8007034 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	da0b      	bge.n	8006fd0 <USBD_StdEPReq+0x224>
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	3310      	adds	r3, #16
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	3304      	adds	r3, #4
 8006fce:	e00b      	b.n	8006fe8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <USBD_StdEPReq+0x24a>
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	2b80      	cmp	r3, #128	; 0x80
 8006ff4:	d103      	bne.n	8006ffe <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	e00e      	b.n	800701c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 f878 	bl	80080f8 <USBD_LL_IsStallEP>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2201      	movs	r2, #1
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	e002      	b.n	800701c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2202      	movs	r2, #2
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fbaf 	bl	8007786 <USBD_CtlSendData>
          break;
 8007028:	e004      	b.n	8007034 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fb39 	bl	80076a4 <USBD_CtlError>
        break;
 8007032:	bf00      	nop
      }
      break;
 8007034:	e004      	b.n	8007040 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fb33 	bl	80076a4 <USBD_CtlError>
      break;
 800703e:	bf00      	nop
    }
    break;
 8007040:	e004      	b.n	800704c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fb2d 	bl	80076a4 <USBD_CtlError>
    break;
 800704a:	bf00      	nop
  }

  return ret;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	0a1b      	lsrs	r3, r3, #8
 8007074:	b29b      	uxth	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	2b06      	cmp	r3, #6
 800707a:	f200 8128 	bhi.w	80072ce <USBD_GetDescriptor+0x276>
 800707e:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <USBD_GetDescriptor+0x2c>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070a1 	.word	0x080070a1
 8007088:	080070b9 	.word	0x080070b9
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080072cf 	.word	0x080072cf
 8007094:	080072cf 	.word	0x080072cf
 8007098:	0800726f 	.word	0x0800726f
 800709c:	0800729b 	.word	0x0800729b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	7c12      	ldrb	r2, [r2, #16]
 80070ac:	f107 0108 	add.w	r1, r7, #8
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3
 80070b4:	60f8      	str	r0, [r7, #12]
    break;
 80070b6:	e112      	b.n	80072de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	7c1b      	ldrb	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10d      	bne.n	80070dc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c8:	f107 0208 	add.w	r2, r7, #8
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
 80070d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3301      	adds	r3, #1
 80070d6:	2202      	movs	r2, #2
 80070d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80070da:	e100      	b.n	80072de <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	f107 0208 	add.w	r2, r7, #8
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3301      	adds	r3, #1
 80070f2:	2202      	movs	r2, #2
 80070f4:	701a      	strb	r2, [r3, #0]
    break;
 80070f6:	e0f2      	b.n	80072de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	885b      	ldrh	r3, [r3, #2]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b05      	cmp	r3, #5
 8007100:	f200 80ac 	bhi.w	800725c <USBD_GetDescriptor+0x204>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <USBD_GetDescriptor+0xb4>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007125 	.word	0x08007125
 8007110:	08007159 	.word	0x08007159
 8007114:	0800718d 	.word	0x0800718d
 8007118:	080071c1 	.word	0x080071c1
 800711c:	080071f5 	.word	0x080071f5
 8007120:	08007229 	.word	0x08007229
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00b      	beq.n	8007148 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	7c12      	ldrb	r2, [r2, #16]
 800713c:	f107 0108 	add.w	r1, r7, #8
 8007140:	4610      	mov	r0, r2
 8007142:	4798      	blx	r3
 8007144:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007146:	e091      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 faaa 	bl	80076a4 <USBD_CtlError>
        err++;
 8007150:	7afb      	ldrb	r3, [r7, #11]
 8007152:	3301      	adds	r3, #1
 8007154:	72fb      	strb	r3, [r7, #11]
      break;
 8007156:	e089      	b.n	800726c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00b      	beq.n	800717c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	7c12      	ldrb	r2, [r2, #16]
 8007170:	f107 0108 	add.w	r1, r7, #8
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
 8007178:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800717a:	e077      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa90 	bl	80076a4 <USBD_CtlError>
        err++;
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	3301      	adds	r3, #1
 8007188:	72fb      	strb	r3, [r7, #11]
      break;
 800718a:	e06f      	b.n	800726c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	7c12      	ldrb	r2, [r2, #16]
 80071a4:	f107 0108 	add.w	r1, r7, #8
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ae:	e05d      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa76 	bl	80076a4 <USBD_CtlError>
        err++;
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	3301      	adds	r3, #1
 80071bc:	72fb      	strb	r3, [r7, #11]
      break;
 80071be:	e055      	b.n	800726c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	7c12      	ldrb	r2, [r2, #16]
 80071d8:	f107 0108 	add.w	r1, r7, #8
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
 80071e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071e2:	e043      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa5c 	bl	80076a4 <USBD_CtlError>
        err++;
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	3301      	adds	r3, #1
 80071f0:	72fb      	strb	r3, [r7, #11]
      break;
 80071f2:	e03b      	b.n	800726c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00b      	beq.n	8007218 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	7c12      	ldrb	r2, [r2, #16]
 800720c:	f107 0108 	add.w	r1, r7, #8
 8007210:	4610      	mov	r0, r2
 8007212:	4798      	blx	r3
 8007214:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007216:	e029      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa42 	bl	80076a4 <USBD_CtlError>
        err++;
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	3301      	adds	r3, #1
 8007224:	72fb      	strb	r3, [r7, #11]
      break;
 8007226:	e021      	b.n	800726c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00b      	beq.n	800724c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	7c12      	ldrb	r2, [r2, #16]
 8007240:	f107 0108 	add.w	r1, r7, #8
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
 8007248:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800724a:	e00f      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa28 	bl	80076a4 <USBD_CtlError>
        err++;
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	3301      	adds	r3, #1
 8007258:	72fb      	strb	r3, [r7, #11]
      break;
 800725a:	e007      	b.n	800726c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa20 	bl	80076a4 <USBD_CtlError>
      err++;
 8007264:	7afb      	ldrb	r3, [r7, #11]
 8007266:	3301      	adds	r3, #1
 8007268:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800726a:	bf00      	nop
    }
    break;
 800726c:	e037      	b.n	80072de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	7c1b      	ldrb	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727e:	f107 0208 	add.w	r2, r7, #8
 8007282:	4610      	mov	r0, r2
 8007284:	4798      	blx	r3
 8007286:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007288:	e029      	b.n	80072de <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa09 	bl	80076a4 <USBD_CtlError>
      err++;
 8007292:	7afb      	ldrb	r3, [r7, #11]
 8007294:	3301      	adds	r3, #1
 8007296:	72fb      	strb	r3, [r7, #11]
    break;
 8007298:	e021      	b.n	80072de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7c1b      	ldrb	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10d      	bne.n	80072be <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f107 0208 	add.w	r2, r7, #8
 80072ae:	4610      	mov	r0, r2
 80072b0:	4798      	blx	r3
 80072b2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	2207      	movs	r2, #7
 80072ba:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80072bc:	e00f      	b.n	80072de <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f9ef 	bl	80076a4 <USBD_CtlError>
      err++;
 80072c6:	7afb      	ldrb	r3, [r7, #11]
 80072c8:	3301      	adds	r3, #1
 80072ca:	72fb      	strb	r3, [r7, #11]
    break;
 80072cc:	e007      	b.n	80072de <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f9e7 	bl	80076a4 <USBD_CtlError>
    err++;
 80072d6:	7afb      	ldrb	r3, [r7, #11]
 80072d8:	3301      	adds	r3, #1
 80072da:	72fb      	strb	r3, [r7, #11]
    break;
 80072dc:	bf00      	nop
  }

  if (err != 0U)
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11e      	bne.n	8007322 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	88db      	ldrh	r3, [r3, #6]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d016      	beq.n	800731a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80072ec:	893b      	ldrh	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	88da      	ldrh	r2, [r3, #6]
 80072f6:	893b      	ldrh	r3, [r7, #8]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	bf28      	it	cs
 80072fc:	4613      	movcs	r3, r2
 80072fe:	b29b      	uxth	r3, r3
 8007300:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007302:	893b      	ldrh	r3, [r7, #8]
 8007304:	461a      	mov	r2, r3
 8007306:	68f9      	ldr	r1, [r7, #12]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fa3c 	bl	8007786 <USBD_CtlSendData>
 800730e:	e009      	b.n	8007324 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9c6 	bl	80076a4 <USBD_CtlError>
 8007318:	e004      	b.n	8007324 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa8d 	bl	800783a <USBD_CtlSendStatus>
 8007320:	e000      	b.n	8007324 <USBD_GetDescriptor+0x2cc>
    return;
 8007322:	bf00      	nop
    }
  }
}
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop

0800732c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	889b      	ldrh	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d130      	bne.n	80073a0 <USBD_SetAddress+0x74>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	88db      	ldrh	r3, [r3, #6]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d12c      	bne.n	80073a0 <USBD_SetAddress+0x74>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	885b      	ldrh	r3, [r3, #2]
 800734a:	2b7f      	cmp	r3, #127	; 0x7f
 800734c:	d828      	bhi.n	80073a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007358:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007360:	2b03      	cmp	r3, #3
 8007362:	d104      	bne.n	800736e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f99c 	bl	80076a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800736c:	e01c      	b.n	80073a8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	7bfa      	ldrb	r2, [r7, #15]
 8007372:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fee8 	bl	8008150 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa5a 	bl	800783a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d004      	beq.n	8007396 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007394:	e008      	b.n	80073a8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739e:	e003      	b.n	80073a8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f97e 	bl	80076a4 <USBD_CtlError>
  }
}
 80073a8:	bf00      	nop
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	885b      	ldrh	r3, [r3, #2]
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	4b4b      	ldr	r3, [pc, #300]	; (80074f4 <USBD_SetConfig+0x144>)
 80073c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073c8:	4b4a      	ldr	r3, [pc, #296]	; (80074f4 <USBD_SetConfig+0x144>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d905      	bls.n	80073dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f966 	bl	80076a4 <USBD_CtlError>
    return USBD_FAIL;
 80073d8:	2303      	movs	r3, #3
 80073da:	e087      	b.n	80074ec <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d002      	beq.n	80073ec <USBD_SetConfig+0x3c>
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d025      	beq.n	8007436 <USBD_SetConfig+0x86>
 80073ea:	e071      	b.n	80074d0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80073ec:	4b41      	ldr	r3, [pc, #260]	; (80074f4 <USBD_SetConfig+0x144>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01c      	beq.n	800742e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80073f4:	4b3f      	ldr	r3, [pc, #252]	; (80074f4 <USBD_SetConfig+0x144>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80073fe:	4b3d      	ldr	r3, [pc, #244]	; (80074f4 <USBD_SetConfig+0x144>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff f9a7 	bl	8006758 <USBD_SetClassConfig>
 800740a:	4603      	mov	r3, r0
 800740c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f944 	bl	80076a4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800741c:	e065      	b.n	80074ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa0b 	bl	800783a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2203      	movs	r2, #3
 8007428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800742c:	e05d      	b.n	80074ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fa03 	bl	800783a <USBD_CtlSendStatus>
    break;
 8007434:	e059      	b.n	80074ea <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007436:	4b2f      	ldr	r3, [pc, #188]	; (80074f4 <USBD_SetConfig+0x144>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d112      	bne.n	8007464 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007446:	4b2b      	ldr	r3, [pc, #172]	; (80074f4 <USBD_SetConfig+0x144>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007450:	4b28      	ldr	r3, [pc, #160]	; (80074f4 <USBD_SetConfig+0x144>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff f99a 	bl	8006790 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f9ec 	bl	800783a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007462:	e042      	b.n	80074ea <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007464:	4b23      	ldr	r3, [pc, #140]	; (80074f4 <USBD_SetConfig+0x144>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	429a      	cmp	r2, r3
 8007470:	d02a      	beq.n	80074c8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7ff f988 	bl	8006790 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007480:	4b1c      	ldr	r3, [pc, #112]	; (80074f4 <USBD_SetConfig+0x144>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800748a:	4b1a      	ldr	r3, [pc, #104]	; (80074f4 <USBD_SetConfig+0x144>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff f961 	bl	8006758 <USBD_SetClassConfig>
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00f      	beq.n	80074c0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f8fe 	bl	80076a4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff f96d 	bl	8006790 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80074be:	e014      	b.n	80074ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f9ba 	bl	800783a <USBD_CtlSendStatus>
    break;
 80074c6:	e010      	b.n	80074ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f9b6 	bl	800783a <USBD_CtlSendStatus>
    break;
 80074ce:	e00c      	b.n	80074ea <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f8e6 	bl	80076a4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <USBD_SetConfig+0x144>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff f956 	bl	8006790 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	73fb      	strb	r3, [r7, #15]
    break;
 80074e8:	bf00      	nop
  }

  return ret;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000208 	.word	0x20000208

080074f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	88db      	ldrh	r3, [r3, #6]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d004      	beq.n	8007514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8c9 	bl	80076a4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007512:	e021      	b.n	8007558 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751a:	2b01      	cmp	r3, #1
 800751c:	db17      	blt.n	800754e <USBD_GetConfig+0x56>
 800751e:	2b02      	cmp	r3, #2
 8007520:	dd02      	ble.n	8007528 <USBD_GetConfig+0x30>
 8007522:	2b03      	cmp	r3, #3
 8007524:	d00b      	beq.n	800753e <USBD_GetConfig+0x46>
 8007526:	e012      	b.n	800754e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3308      	adds	r3, #8
 8007532:	2201      	movs	r2, #1
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f925 	bl	8007786 <USBD_CtlSendData>
      break;
 800753c:	e00c      	b.n	8007558 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3304      	adds	r3, #4
 8007542:	2201      	movs	r2, #1
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f91d 	bl	8007786 <USBD_CtlSendData>
      break;
 800754c:	e004      	b.n	8007558 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f8a7 	bl	80076a4 <USBD_CtlError>
      break;
 8007556:	bf00      	nop
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007570:	3b01      	subs	r3, #1
 8007572:	2b02      	cmp	r3, #2
 8007574:	d81e      	bhi.n	80075b4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	88db      	ldrh	r3, [r3, #6]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d004      	beq.n	8007588 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f88f 	bl	80076a4 <USBD_CtlError>
      break;
 8007586:	e01a      	b.n	80075be <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f043 0202 	orr.w	r2, r3, #2
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	330c      	adds	r3, #12
 80075a8:	2202      	movs	r2, #2
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f8ea 	bl	8007786 <USBD_CtlSendData>
    break;
 80075b2:	e004      	b.n	80075be <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f874 	bl	80076a4 <USBD_CtlError>
    break;
 80075bc:	bf00      	nop
  }
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	885b      	ldrh	r3, [r3, #2]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d106      	bne.n	80075e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f92a 	bl	800783a <USBD_CtlSendStatus>
  }
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fe:	3b01      	subs	r3, #1
 8007600:	2b02      	cmp	r3, #2
 8007602:	d80b      	bhi.n	800761c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	885b      	ldrh	r3, [r3, #2]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d10c      	bne.n	8007626 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f910 	bl	800783a <USBD_CtlSendStatus>
      }
      break;
 800761a:	e004      	b.n	8007626 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f840 	bl	80076a4 <USBD_CtlError>
      break;
 8007624:	e000      	b.n	8007628 <USBD_ClrFeature+0x3a>
      break;
 8007626:	bf00      	nop
  }
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	781a      	ldrb	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	781a      	ldrb	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff fad3 	bl	8006c06 <SWAPBYTE>
 8007660:	4603      	mov	r3, r0
 8007662:	461a      	mov	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fac6 	bl	8006c06 <SWAPBYTE>
 800767a:	4603      	mov	r3, r0
 800767c:	461a      	mov	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3301      	adds	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3301      	adds	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff fab9 	bl	8006c06 <SWAPBYTE>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	80da      	strh	r2, [r3, #6]
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ae:	2180      	movs	r1, #128	; 0x80
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fce3 	bl	800807c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fcdf 	bl	800807c <USBD_LL_StallEP>
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b086      	sub	sp, #24
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d036      	beq.n	800774a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076e0:	6938      	ldr	r0, [r7, #16]
 80076e2:	f000 f836 	bl	8007752 <USBD_GetLen>
 80076e6:	4603      	mov	r3, r0
 80076e8:	3301      	adds	r3, #1
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	4413      	add	r3, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	7812      	ldrb	r2, [r2, #0]
 80076fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	3301      	adds	r3, #1
 8007704:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	4413      	add	r3, r2
 800770c:	2203      	movs	r2, #3
 800770e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	3301      	adds	r3, #1
 8007714:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007716:	e013      	b.n	8007740 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	7812      	ldrb	r2, [r2, #0]
 8007722:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	3301      	adds	r3, #1
 8007728:	613b      	str	r3, [r7, #16]
    idx++;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	3301      	adds	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
    idx++;
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	3301      	adds	r3, #1
 800773e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e7      	bne.n	8007718 <USBD_GetString+0x52>
 8007748:	e000      	b.n	800774c <USBD_GetString+0x86>
    return;
 800774a:	bf00      	nop
  }
}
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007762:	e005      	b.n	8007770 <USBD_GetLen+0x1e>
  {
    len++;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	3301      	adds	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	3301      	adds	r3, #1
 800776e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f5      	bne.n	8007764 <USBD_GetLen+0x12>
  }

  return len;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2202      	movs	r2, #2
 8007796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	2100      	movs	r1, #0
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 fcee 	bl	800818e <USBD_LL_Transmit>

  return USBD_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	2100      	movs	r1, #0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fcdd 	bl	800818e <USBD_LL_Transmit>

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2203      	movs	r2, #3
 80077ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	2100      	movs	r1, #0
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fce1 	bl	80081d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	2100      	movs	r1, #0
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fcd0 	bl	80081d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2204      	movs	r2, #4
 8007846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800784a:	2300      	movs	r3, #0
 800784c:	2200      	movs	r2, #0
 800784e:	2100      	movs	r1, #0
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fc9c 	bl	800818e <USBD_LL_Transmit>

  return USBD_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2205      	movs	r2, #5
 800786c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007870:	2300      	movs	r3, #0
 8007872:	2200      	movs	r2, #0
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fcaa 	bl	80081d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800788c:	2200      	movs	r2, #0
 800788e:	4912      	ldr	r1, [pc, #72]	; (80078d8 <MX_USB_DEVICE_Init+0x50>)
 8007890:	4812      	ldr	r0, [pc, #72]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 8007892:	f7fe fef3 	bl	800667c <USBD_Init>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800789c:	f7f9 faf8 	bl	8000e90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078a0:	490f      	ldr	r1, [pc, #60]	; (80078e0 <MX_USB_DEVICE_Init+0x58>)
 80078a2:	480e      	ldr	r0, [pc, #56]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 80078a4:	f7fe ff20 	bl	80066e8 <USBD_RegisterClass>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078ae:	f7f9 faef 	bl	8000e90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078b2:	490c      	ldr	r1, [pc, #48]	; (80078e4 <MX_USB_DEVICE_Init+0x5c>)
 80078b4:	4809      	ldr	r0, [pc, #36]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 80078b6:	f7fe fe45 	bl	8006544 <USBD_CDC_RegisterInterface>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078c0:	f7f9 fae6 	bl	8000e90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078c4:	4805      	ldr	r0, [pc, #20]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 80078c6:	f7fe ff30 	bl	800672a <USBD_Start>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078d0:	f7f9 fade 	bl	8000e90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078d4:	bf00      	nop
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	20000130 	.word	0x20000130
 80078dc:	20000394 	.word	0x20000394
 80078e0:	20000018 	.word	0x20000018
 80078e4:	2000011c 	.word	0x2000011c

080078e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078ec:	2200      	movs	r2, #0
 80078ee:	4905      	ldr	r1, [pc, #20]	; (8007904 <CDC_Init_FS+0x1c>)
 80078f0:	4805      	ldr	r0, [pc, #20]	; (8007908 <CDC_Init_FS+0x20>)
 80078f2:	f7fe fe3c 	bl	800656e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078f6:	4905      	ldr	r1, [pc, #20]	; (800790c <CDC_Init_FS+0x24>)
 80078f8:	4803      	ldr	r0, [pc, #12]	; (8007908 <CDC_Init_FS+0x20>)
 80078fa:	f7fe fe51 	bl	80065a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007900:	4618      	mov	r0, r3
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000e64 	.word	0x20000e64
 8007908:	20000394 	.word	0x20000394
 800790c:	20000664 	.word	0x20000664

08007910 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007910:	b480      	push	{r7}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007914:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007916:	4618      	mov	r0, r3
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
 800792c:	4613      	mov	r3, r2
 800792e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	2b23      	cmp	r3, #35	; 0x23
 8007934:	d84a      	bhi.n	80079cc <CDC_Control_FS+0xac>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <CDC_Control_FS+0x1c>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	080079cd 	.word	0x080079cd
 8007940:	080079cd 	.word	0x080079cd
 8007944:	080079cd 	.word	0x080079cd
 8007948:	080079cd 	.word	0x080079cd
 800794c:	080079cd 	.word	0x080079cd
 8007950:	080079cd 	.word	0x080079cd
 8007954:	080079cd 	.word	0x080079cd
 8007958:	080079cd 	.word	0x080079cd
 800795c:	080079cd 	.word	0x080079cd
 8007960:	080079cd 	.word	0x080079cd
 8007964:	080079cd 	.word	0x080079cd
 8007968:	080079cd 	.word	0x080079cd
 800796c:	080079cd 	.word	0x080079cd
 8007970:	080079cd 	.word	0x080079cd
 8007974:	080079cd 	.word	0x080079cd
 8007978:	080079cd 	.word	0x080079cd
 800797c:	080079cd 	.word	0x080079cd
 8007980:	080079cd 	.word	0x080079cd
 8007984:	080079cd 	.word	0x080079cd
 8007988:	080079cd 	.word	0x080079cd
 800798c:	080079cd 	.word	0x080079cd
 8007990:	080079cd 	.word	0x080079cd
 8007994:	080079cd 	.word	0x080079cd
 8007998:	080079cd 	.word	0x080079cd
 800799c:	080079cd 	.word	0x080079cd
 80079a0:	080079cd 	.word	0x080079cd
 80079a4:	080079cd 	.word	0x080079cd
 80079a8:	080079cd 	.word	0x080079cd
 80079ac:	080079cd 	.word	0x080079cd
 80079b0:	080079cd 	.word	0x080079cd
 80079b4:	080079cd 	.word	0x080079cd
 80079b8:	080079cd 	.word	0x080079cd
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	080079cd 	.word	0x080079cd
 80079c4:	080079cd 	.word	0x080079cd
 80079c8:	080079cd 	.word	0x080079cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079cc:	bf00      	nop
  }

  return (USBD_OK);
 80079ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	4805      	ldr	r0, [pc, #20]	; (8007a00 <CDC_Receive_FS+0x24>)
 80079ea:	f7fe fdd9 	bl	80065a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079ee:	4804      	ldr	r0, [pc, #16]	; (8007a00 <CDC_Receive_FS+0x24>)
 80079f0:	f7fe fe1a 	bl	8006628 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80079f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000394 	.word	0x20000394

08007a04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a14:	4b0d      	ldr	r3, [pc, #52]	; (8007a4c <CDC_Transmit_FS+0x48>)
 8007a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e00b      	b.n	8007a42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a2a:	887b      	ldrh	r3, [r7, #2]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	4806      	ldr	r0, [pc, #24]	; (8007a4c <CDC_Transmit_FS+0x48>)
 8007a32:	f7fe fd9c 	bl	800656e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a36:	4805      	ldr	r0, [pc, #20]	; (8007a4c <CDC_Transmit_FS+0x48>)
 8007a38:	f7fe fdc6 	bl	80065c8 <USBD_CDC_TransmitPacket>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000394 	.word	0x20000394

08007a50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	371c      	adds	r7, #28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
	...

08007a74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	6039      	str	r1, [r7, #0]
 8007a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2212      	movs	r2, #18
 8007a84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a86:	4b03      	ldr	r3, [pc, #12]	; (8007a94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	2000014c 	.word	0x2000014c

08007a98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	6039      	str	r1, [r7, #0]
 8007aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007aaa:	4b03      	ldr	r3, [pc, #12]	; (8007ab8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	20000160 	.word	0x20000160

08007abc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	6039      	str	r1, [r7, #0]
 8007ac6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ac8:	79fb      	ldrb	r3, [r7, #7]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d105      	bne.n	8007ada <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	4907      	ldr	r1, [pc, #28]	; (8007af0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ad2:	4808      	ldr	r0, [pc, #32]	; (8007af4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ad4:	f7ff fdf7 	bl	80076c6 <USBD_GetString>
 8007ad8:	e004      	b.n	8007ae4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	4904      	ldr	r1, [pc, #16]	; (8007af0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ade:	4805      	ldr	r0, [pc, #20]	; (8007af4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ae0:	f7ff fdf1 	bl	80076c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ae4:	4b02      	ldr	r3, [pc, #8]	; (8007af0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20001664 	.word	0x20001664
 8007af4:	08008ca8 	.word	0x08008ca8

08007af8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	4904      	ldr	r1, [pc, #16]	; (8007b18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b08:	4804      	ldr	r0, [pc, #16]	; (8007b1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b0a:	f7ff fddc 	bl	80076c6 <USBD_GetString>
  return USBD_StrDesc;
 8007b0e:	4b02      	ldr	r3, [pc, #8]	; (8007b18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	20001664 	.word	0x20001664
 8007b1c:	08008cc0 	.word	0x08008cc0

08007b20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	6039      	str	r1, [r7, #0]
 8007b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	221a      	movs	r2, #26
 8007b30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b32:	f000 f843 	bl	8007bbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b36:	4b02      	ldr	r3, [pc, #8]	; (8007b40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	20000164 	.word	0x20000164

08007b44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d105      	bne.n	8007b62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	4907      	ldr	r1, [pc, #28]	; (8007b78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b5a:	4808      	ldr	r0, [pc, #32]	; (8007b7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b5c:	f7ff fdb3 	bl	80076c6 <USBD_GetString>
 8007b60:	e004      	b.n	8007b6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	4904      	ldr	r1, [pc, #16]	; (8007b78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b66:	4805      	ldr	r0, [pc, #20]	; (8007b7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b68:	f7ff fdad 	bl	80076c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b6c:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20001664 	.word	0x20001664
 8007b7c:	08008cd4 	.word	0x08008cd4

08007b80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d105      	bne.n	8007b9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	4907      	ldr	r1, [pc, #28]	; (8007bb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b96:	4808      	ldr	r0, [pc, #32]	; (8007bb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b98:	f7ff fd95 	bl	80076c6 <USBD_GetString>
 8007b9c:	e004      	b.n	8007ba8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4904      	ldr	r1, [pc, #16]	; (8007bb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ba2:	4805      	ldr	r0, [pc, #20]	; (8007bb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ba4:	f7ff fd8f 	bl	80076c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ba8:	4b02      	ldr	r3, [pc, #8]	; (8007bb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20001664 	.word	0x20001664
 8007bb8:	08008ce0 	.word	0x08008ce0

08007bbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bc2:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <Get_SerialNum+0x44>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bc8:	4b0e      	ldr	r3, [pc, #56]	; (8007c04 <Get_SerialNum+0x48>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bce:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <Get_SerialNum+0x4c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4413      	add	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007be2:	2208      	movs	r2, #8
 8007be4:	4909      	ldr	r1, [pc, #36]	; (8007c0c <Get_SerialNum+0x50>)
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f814 	bl	8007c14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bec:	2204      	movs	r2, #4
 8007bee:	4908      	ldr	r1, [pc, #32]	; (8007c10 <Get_SerialNum+0x54>)
 8007bf0:	68b8      	ldr	r0, [r7, #8]
 8007bf2:	f000 f80f 	bl	8007c14 <IntToUnicode>
  }
}
 8007bf6:	bf00      	nop
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	1fff7a10 	.word	0x1fff7a10
 8007c04:	1fff7a14 	.word	0x1fff7a14
 8007c08:	1fff7a18 	.word	0x1fff7a18
 8007c0c:	20000166 	.word	0x20000166
 8007c10:	20000176 	.word	0x20000176

08007c14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c26:	2300      	movs	r3, #0
 8007c28:	75fb      	strb	r3, [r7, #23]
 8007c2a:	e027      	b.n	8007c7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	0f1b      	lsrs	r3, r3, #28
 8007c30:	2b09      	cmp	r3, #9
 8007c32:	d80b      	bhi.n	8007c4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	0f1b      	lsrs	r3, r3, #28
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	4619      	mov	r1, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	440b      	add	r3, r1
 8007c44:	3230      	adds	r2, #48	; 0x30
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]
 8007c4a:	e00a      	b.n	8007c62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	0f1b      	lsrs	r3, r3, #28
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	4619      	mov	r1, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	440b      	add	r3, r1
 8007c5c:	3237      	adds	r2, #55	; 0x37
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	011b      	lsls	r3, r3, #4
 8007c66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4413      	add	r3, r2
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
 8007c7c:	7dfa      	ldrb	r2, [r7, #23]
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d3d3      	bcc.n	8007c2c <IntToUnicode+0x18>
  }
}
 8007c84:	bf00      	nop
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c98:	f107 0314 	add.w	r3, r7, #20
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	609a      	str	r2, [r3, #8]
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cb0:	d147      	bne.n	8007d42 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	613b      	str	r3, [r7, #16]
 8007cb6:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <HAL_PCD_MspInit+0xbc>)
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	4a24      	ldr	r2, [pc, #144]	; (8007d4c <HAL_PCD_MspInit+0xbc>)
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cc2:	4b22      	ldr	r3, [pc, #136]	; (8007d4c <HAL_PCD_MspInit+0xbc>)
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007cce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ce0:	230a      	movs	r3, #10
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce4:	f107 0314 	add.w	r3, r7, #20
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4819      	ldr	r0, [pc, #100]	; (8007d50 <HAL_PCD_MspInit+0xc0>)
 8007cec:	f7f9 fce4 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007cfe:	f107 0314 	add.w	r3, r7, #20
 8007d02:	4619      	mov	r1, r3
 8007d04:	4812      	ldr	r0, [pc, #72]	; (8007d50 <HAL_PCD_MspInit+0xc0>)
 8007d06:	f7f9 fcd7 	bl	80016b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d0a:	4b10      	ldr	r3, [pc, #64]	; (8007d4c <HAL_PCD_MspInit+0xbc>)
 8007d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0e:	4a0f      	ldr	r2, [pc, #60]	; (8007d4c <HAL_PCD_MspInit+0xbc>)
 8007d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d14:	6353      	str	r3, [r2, #52]	; 0x34
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <HAL_PCD_MspInit+0xbc>)
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1e:	4a0b      	ldr	r2, [pc, #44]	; (8007d4c <HAL_PCD_MspInit+0xbc>)
 8007d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d24:	6453      	str	r3, [r2, #68]	; 0x44
 8007d26:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <HAL_PCD_MspInit+0xbc>)
 8007d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d32:	2200      	movs	r2, #0
 8007d34:	2100      	movs	r1, #0
 8007d36:	2043      	movs	r0, #67	; 0x43
 8007d38:	f7f9 fc87 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d3c:	2043      	movs	r0, #67	; 0x43
 8007d3e:	f7f9 fca0 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d42:	bf00      	nop
 8007d44:	3728      	adds	r7, #40	; 0x28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	40023800 	.word	0x40023800
 8007d50:	40020000 	.word	0x40020000

08007d54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	f7fe fd28 	bl	80067c0 <USBD_LL_SetupStage>
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007d8a:	78fa      	ldrb	r2, [r7, #3]
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	1a9b      	subs	r3, r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	440b      	add	r3, r1
 8007d98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	78fb      	ldrb	r3, [r7, #3]
 8007da0:	4619      	mov	r1, r3
 8007da2:	f7fe fd60 	bl	8006866 <USBD_LL_DataOutStage>
}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007dc0:	78fa      	ldrb	r2, [r7, #3]
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	1a9b      	subs	r3, r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	3348      	adds	r3, #72	; 0x48
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	f7fe fda9 	bl	800692c <USBD_LL_DataInStage>
}
 8007dda:	bf00      	nop
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b082      	sub	sp, #8
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe fead 	bl	8006b50 <USBD_LL_SOF>
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e06:	2301      	movs	r3, #1
 8007e08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d001      	beq.n	8007e16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e12:	f7f9 f83d 	bl	8000e90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e1c:	7bfa      	ldrb	r2, [r7, #15]
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fe fe5a 	bl	8006ada <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fe fe13 	bl	8006a58 <USBD_LL_Reset>
}
 8007e32:	bf00      	nop
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fe55 	bl	8006afa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6812      	ldr	r2, [r2, #0]
 8007e5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e62:	f043 0301 	orr.w	r3, r3, #1
 8007e66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e70:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <HAL_PCD_SuspendCallback+0x48>)
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	4a03      	ldr	r2, [pc, #12]	; (8007e84 <HAL_PCD_SuspendCallback+0x48>)
 8007e76:	f043 0306 	orr.w	r3, r3, #6
 8007e7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e7c:	bf00      	nop
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	e000ed00 	.word	0xe000ed00

08007e88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe fe44 	bl	8006b24 <USBD_LL_Resume>
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eb6:	78fa      	ldrb	r2, [r7, #3]
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fe6f 	bl	8006b9e <USBD_LL_IsoOUTIncomplete>
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fe50 	bl	8006b84 <USBD_LL_IsoINIncomplete>
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fe5c 	bl	8006bb8 <USBD_LL_DevConnected>
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fe59 	bl	8006bce <USBD_LL_DevDisconnected>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d13c      	bne.n	8007fae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f34:	4a20      	ldr	r2, [pc, #128]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a1e      	ldr	r2, [pc, #120]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f44:	4b1c      	ldr	r3, [pc, #112]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f4c:	4b1a      	ldr	r3, [pc, #104]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f4e:	2204      	movs	r2, #4
 8007f50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f52:	4b19      	ldr	r3, [pc, #100]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f54:	2202      	movs	r2, #2
 8007f56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f58:	4b17      	ldr	r3, [pc, #92]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f5e:	4b16      	ldr	r3, [pc, #88]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f60:	2202      	movs	r2, #2
 8007f62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007f64:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f6a:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f70:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007f76:	4b10      	ldr	r3, [pc, #64]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f7c:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f82:	480d      	ldr	r0, [pc, #52]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f84:	f7fa fb24 	bl	80025d0 <HAL_PCD_Init>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f8e:	f7f8 ff7f 	bl	8000e90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f92:	2180      	movs	r1, #128	; 0x80
 8007f94:	4808      	ldr	r0, [pc, #32]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007f96:	f7fb fc82 	bl	800389e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f9a:	2240      	movs	r2, #64	; 0x40
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	4806      	ldr	r0, [pc, #24]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007fa0:	f7fb fc36 	bl	8003810 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fa4:	2280      	movs	r2, #128	; 0x80
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	4803      	ldr	r0, [pc, #12]	; (8007fb8 <USBD_LL_Init+0x94>)
 8007faa:	f7fb fc31 	bl	8003810 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20001864 	.word	0x20001864

08007fbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fa fc19 	bl	800280a <HAL_PCD_Start>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 f92a 	bl	8008238 <USBD_Get_USB_Status>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	461a      	mov	r2, r3
 8008000:	4603      	mov	r3, r0
 8008002:	70fb      	strb	r3, [r7, #3]
 8008004:	460b      	mov	r3, r1
 8008006:	70bb      	strb	r3, [r7, #2]
 8008008:	4613      	mov	r3, r2
 800800a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800801a:	78bb      	ldrb	r3, [r7, #2]
 800801c:	883a      	ldrh	r2, [r7, #0]
 800801e:	78f9      	ldrb	r1, [r7, #3]
 8008020:	f7fa fffd 	bl	800301e <HAL_PCD_EP_Open>
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f904 	bl	8008238 <USBD_Get_USB_Status>
 8008030:	4603      	mov	r3, r0
 8008032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008034:	7bbb      	ldrb	r3, [r7, #14]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008058:	78fa      	ldrb	r2, [r7, #3]
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f7fb f846 	bl	80030ee <HAL_PCD_EP_Close>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	4618      	mov	r0, r3
 800806a:	f000 f8e5 	bl	8008238 <USBD_Get_USB_Status>
 800806e:	4603      	mov	r3, r0
 8008070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008072:	7bbb      	ldrb	r3, [r7, #14]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f7fb f91e 	bl	80032dc <HAL_PCD_EP_SetStall>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f8c6 	bl	8008238 <USBD_Get_USB_Status>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	460b      	mov	r3, r1
 80080c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	4611      	mov	r1, r2
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fb f963 	bl	80033a4 <HAL_PCD_EP_ClrStall>
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 f8a7 	bl	8008238 <USBD_Get_USB_Status>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800810a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800810c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008110:	2b00      	cmp	r3, #0
 8008112:	da0b      	bge.n	800812c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800811a:	68f9      	ldr	r1, [r7, #12]
 800811c:	4613      	mov	r3, r2
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	333e      	adds	r3, #62	; 0x3e
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	e00b      	b.n	8008144 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008132:	68f9      	ldr	r1, [r7, #12]
 8008134:	4613      	mov	r3, r2
 8008136:	00db      	lsls	r3, r3, #3
 8008138:	1a9b      	subs	r3, r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008142:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800816a:	78fa      	ldrb	r2, [r7, #3]
 800816c:	4611      	mov	r1, r2
 800816e:	4618      	mov	r0, r3
 8008170:	f7fa ff30 	bl	8002fd4 <HAL_PCD_SetAddress>
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f85c 	bl	8008238 <USBD_Get_USB_Status>
 8008180:	4603      	mov	r3, r0
 8008182:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008184:	7bbb      	ldrb	r3, [r7, #14]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b086      	sub	sp, #24
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	460b      	mov	r3, r1
 800819c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081ac:	7af9      	ldrb	r1, [r7, #11]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	f7fb f849 	bl	8003248 <HAL_PCD_EP_Transmit>
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 f83b 	bl	8008238 <USBD_Get_USB_Status>
 80081c2:	4603      	mov	r3, r0
 80081c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	460b      	mov	r3, r1
 80081de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081ee:	7af9      	ldrb	r1, [r7, #11]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	f7fa ffc5 	bl	8003182 <HAL_PCD_EP_Receive>
 80081f8:	4603      	mov	r3, r0
 80081fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 f81a 	bl	8008238 <USBD_Get_USB_Status>
 8008204:	4603      	mov	r3, r0
 8008206:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008208:	7dbb      	ldrb	r3, [r7, #22]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f7fa fff5 	bl	8003218 <HAL_PCD_EP_GetRxCount>
 800822e:	4603      	mov	r3, r0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	2b03      	cmp	r3, #3
 800824a:	d817      	bhi.n	800827c <USBD_Get_USB_Status+0x44>
 800824c:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <USBD_Get_USB_Status+0x1c>)
 800824e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008252:	bf00      	nop
 8008254:	08008265 	.word	0x08008265
 8008258:	0800826b 	.word	0x0800826b
 800825c:	08008271 	.word	0x08008271
 8008260:	08008277 	.word	0x08008277
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]
    break;
 8008268:	e00b      	b.n	8008282 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800826a:	2303      	movs	r3, #3
 800826c:	73fb      	strb	r3, [r7, #15]
    break;
 800826e:	e008      	b.n	8008282 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008270:	2301      	movs	r3, #1
 8008272:	73fb      	strb	r3, [r7, #15]
    break;
 8008274:	e005      	b.n	8008282 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008276:	2303      	movs	r3, #3
 8008278:	73fb      	strb	r3, [r7, #15]
    break;
 800827a:	e002      	b.n	8008282 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800827c:	2303      	movs	r3, #3
 800827e:	73fb      	strb	r3, [r7, #15]
    break;
 8008280:	bf00      	nop
  }
  return usb_status;
 8008282:	7bfb      	ldrb	r3, [r7, #15]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <__errno>:
 8008290:	4b01      	ldr	r3, [pc, #4]	; (8008298 <__errno+0x8>)
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20000180 	.word	0x20000180

0800829c <__libc_init_array>:
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	4e0d      	ldr	r6, [pc, #52]	; (80082d4 <__libc_init_array+0x38>)
 80082a0:	4c0d      	ldr	r4, [pc, #52]	; (80082d8 <__libc_init_array+0x3c>)
 80082a2:	1ba4      	subs	r4, r4, r6
 80082a4:	10a4      	asrs	r4, r4, #2
 80082a6:	2500      	movs	r5, #0
 80082a8:	42a5      	cmp	r5, r4
 80082aa:	d109      	bne.n	80082c0 <__libc_init_array+0x24>
 80082ac:	4e0b      	ldr	r6, [pc, #44]	; (80082dc <__libc_init_array+0x40>)
 80082ae:	4c0c      	ldr	r4, [pc, #48]	; (80082e0 <__libc_init_array+0x44>)
 80082b0:	f000 fc38 	bl	8008b24 <_init>
 80082b4:	1ba4      	subs	r4, r4, r6
 80082b6:	10a4      	asrs	r4, r4, #2
 80082b8:	2500      	movs	r5, #0
 80082ba:	42a5      	cmp	r5, r4
 80082bc:	d105      	bne.n	80082ca <__libc_init_array+0x2e>
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082c4:	4798      	blx	r3
 80082c6:	3501      	adds	r5, #1
 80082c8:	e7ee      	b.n	80082a8 <__libc_init_array+0xc>
 80082ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082ce:	4798      	blx	r3
 80082d0:	3501      	adds	r5, #1
 80082d2:	e7f2      	b.n	80082ba <__libc_init_array+0x1e>
 80082d4:	08008d44 	.word	0x08008d44
 80082d8:	08008d44 	.word	0x08008d44
 80082dc:	08008d44 	.word	0x08008d44
 80082e0:	08008d48 	.word	0x08008d48

080082e4 <malloc>:
 80082e4:	4b02      	ldr	r3, [pc, #8]	; (80082f0 <malloc+0xc>)
 80082e6:	4601      	mov	r1, r0
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	f000 b86d 	b.w	80083c8 <_malloc_r>
 80082ee:	bf00      	nop
 80082f0:	20000180 	.word	0x20000180

080082f4 <free>:
 80082f4:	4b02      	ldr	r3, [pc, #8]	; (8008300 <free+0xc>)
 80082f6:	4601      	mov	r1, r0
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	f000 b817 	b.w	800832c <_free_r>
 80082fe:	bf00      	nop
 8008300:	20000180 	.word	0x20000180

08008304 <memcpy>:
 8008304:	b510      	push	{r4, lr}
 8008306:	1e43      	subs	r3, r0, #1
 8008308:	440a      	add	r2, r1
 800830a:	4291      	cmp	r1, r2
 800830c:	d100      	bne.n	8008310 <memcpy+0xc>
 800830e:	bd10      	pop	{r4, pc}
 8008310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008318:	e7f7      	b.n	800830a <memcpy+0x6>

0800831a <memset>:
 800831a:	4402      	add	r2, r0
 800831c:	4603      	mov	r3, r0
 800831e:	4293      	cmp	r3, r2
 8008320:	d100      	bne.n	8008324 <memset+0xa>
 8008322:	4770      	bx	lr
 8008324:	f803 1b01 	strb.w	r1, [r3], #1
 8008328:	e7f9      	b.n	800831e <memset+0x4>
	...

0800832c <_free_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4605      	mov	r5, r0
 8008330:	2900      	cmp	r1, #0
 8008332:	d045      	beq.n	80083c0 <_free_r+0x94>
 8008334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008338:	1f0c      	subs	r4, r1, #4
 800833a:	2b00      	cmp	r3, #0
 800833c:	bfb8      	it	lt
 800833e:	18e4      	addlt	r4, r4, r3
 8008340:	f000 f8cc 	bl	80084dc <__malloc_lock>
 8008344:	4a1f      	ldr	r2, [pc, #124]	; (80083c4 <_free_r+0x98>)
 8008346:	6813      	ldr	r3, [r2, #0]
 8008348:	4610      	mov	r0, r2
 800834a:	b933      	cbnz	r3, 800835a <_free_r+0x2e>
 800834c:	6063      	str	r3, [r4, #4]
 800834e:	6014      	str	r4, [r2, #0]
 8008350:	4628      	mov	r0, r5
 8008352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008356:	f000 b8c2 	b.w	80084de <__malloc_unlock>
 800835a:	42a3      	cmp	r3, r4
 800835c:	d90c      	bls.n	8008378 <_free_r+0x4c>
 800835e:	6821      	ldr	r1, [r4, #0]
 8008360:	1862      	adds	r2, r4, r1
 8008362:	4293      	cmp	r3, r2
 8008364:	bf04      	itt	eq
 8008366:	681a      	ldreq	r2, [r3, #0]
 8008368:	685b      	ldreq	r3, [r3, #4]
 800836a:	6063      	str	r3, [r4, #4]
 800836c:	bf04      	itt	eq
 800836e:	1852      	addeq	r2, r2, r1
 8008370:	6022      	streq	r2, [r4, #0]
 8008372:	6004      	str	r4, [r0, #0]
 8008374:	e7ec      	b.n	8008350 <_free_r+0x24>
 8008376:	4613      	mov	r3, r2
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	b10a      	cbz	r2, 8008380 <_free_r+0x54>
 800837c:	42a2      	cmp	r2, r4
 800837e:	d9fa      	bls.n	8008376 <_free_r+0x4a>
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	1858      	adds	r0, r3, r1
 8008384:	42a0      	cmp	r0, r4
 8008386:	d10b      	bne.n	80083a0 <_free_r+0x74>
 8008388:	6820      	ldr	r0, [r4, #0]
 800838a:	4401      	add	r1, r0
 800838c:	1858      	adds	r0, r3, r1
 800838e:	4282      	cmp	r2, r0
 8008390:	6019      	str	r1, [r3, #0]
 8008392:	d1dd      	bne.n	8008350 <_free_r+0x24>
 8008394:	6810      	ldr	r0, [r2, #0]
 8008396:	6852      	ldr	r2, [r2, #4]
 8008398:	605a      	str	r2, [r3, #4]
 800839a:	4401      	add	r1, r0
 800839c:	6019      	str	r1, [r3, #0]
 800839e:	e7d7      	b.n	8008350 <_free_r+0x24>
 80083a0:	d902      	bls.n	80083a8 <_free_r+0x7c>
 80083a2:	230c      	movs	r3, #12
 80083a4:	602b      	str	r3, [r5, #0]
 80083a6:	e7d3      	b.n	8008350 <_free_r+0x24>
 80083a8:	6820      	ldr	r0, [r4, #0]
 80083aa:	1821      	adds	r1, r4, r0
 80083ac:	428a      	cmp	r2, r1
 80083ae:	bf04      	itt	eq
 80083b0:	6811      	ldreq	r1, [r2, #0]
 80083b2:	6852      	ldreq	r2, [r2, #4]
 80083b4:	6062      	str	r2, [r4, #4]
 80083b6:	bf04      	itt	eq
 80083b8:	1809      	addeq	r1, r1, r0
 80083ba:	6021      	streq	r1, [r4, #0]
 80083bc:	605c      	str	r4, [r3, #4]
 80083be:	e7c7      	b.n	8008350 <_free_r+0x24>
 80083c0:	bd38      	pop	{r3, r4, r5, pc}
 80083c2:	bf00      	nop
 80083c4:	2000020c 	.word	0x2000020c

080083c8 <_malloc_r>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	1ccd      	adds	r5, r1, #3
 80083cc:	f025 0503 	bic.w	r5, r5, #3
 80083d0:	3508      	adds	r5, #8
 80083d2:	2d0c      	cmp	r5, #12
 80083d4:	bf38      	it	cc
 80083d6:	250c      	movcc	r5, #12
 80083d8:	2d00      	cmp	r5, #0
 80083da:	4606      	mov	r6, r0
 80083dc:	db01      	blt.n	80083e2 <_malloc_r+0x1a>
 80083de:	42a9      	cmp	r1, r5
 80083e0:	d903      	bls.n	80083ea <_malloc_r+0x22>
 80083e2:	230c      	movs	r3, #12
 80083e4:	6033      	str	r3, [r6, #0]
 80083e6:	2000      	movs	r0, #0
 80083e8:	bd70      	pop	{r4, r5, r6, pc}
 80083ea:	f000 f877 	bl	80084dc <__malloc_lock>
 80083ee:	4a21      	ldr	r2, [pc, #132]	; (8008474 <_malloc_r+0xac>)
 80083f0:	6814      	ldr	r4, [r2, #0]
 80083f2:	4621      	mov	r1, r4
 80083f4:	b991      	cbnz	r1, 800841c <_malloc_r+0x54>
 80083f6:	4c20      	ldr	r4, [pc, #128]	; (8008478 <_malloc_r+0xb0>)
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	b91b      	cbnz	r3, 8008404 <_malloc_r+0x3c>
 80083fc:	4630      	mov	r0, r6
 80083fe:	f000 f83d 	bl	800847c <_sbrk_r>
 8008402:	6020      	str	r0, [r4, #0]
 8008404:	4629      	mov	r1, r5
 8008406:	4630      	mov	r0, r6
 8008408:	f000 f838 	bl	800847c <_sbrk_r>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d124      	bne.n	800845a <_malloc_r+0x92>
 8008410:	230c      	movs	r3, #12
 8008412:	6033      	str	r3, [r6, #0]
 8008414:	4630      	mov	r0, r6
 8008416:	f000 f862 	bl	80084de <__malloc_unlock>
 800841a:	e7e4      	b.n	80083e6 <_malloc_r+0x1e>
 800841c:	680b      	ldr	r3, [r1, #0]
 800841e:	1b5b      	subs	r3, r3, r5
 8008420:	d418      	bmi.n	8008454 <_malloc_r+0x8c>
 8008422:	2b0b      	cmp	r3, #11
 8008424:	d90f      	bls.n	8008446 <_malloc_r+0x7e>
 8008426:	600b      	str	r3, [r1, #0]
 8008428:	50cd      	str	r5, [r1, r3]
 800842a:	18cc      	adds	r4, r1, r3
 800842c:	4630      	mov	r0, r6
 800842e:	f000 f856 	bl	80084de <__malloc_unlock>
 8008432:	f104 000b 	add.w	r0, r4, #11
 8008436:	1d23      	adds	r3, r4, #4
 8008438:	f020 0007 	bic.w	r0, r0, #7
 800843c:	1ac3      	subs	r3, r0, r3
 800843e:	d0d3      	beq.n	80083e8 <_malloc_r+0x20>
 8008440:	425a      	negs	r2, r3
 8008442:	50e2      	str	r2, [r4, r3]
 8008444:	e7d0      	b.n	80083e8 <_malloc_r+0x20>
 8008446:	428c      	cmp	r4, r1
 8008448:	684b      	ldr	r3, [r1, #4]
 800844a:	bf16      	itet	ne
 800844c:	6063      	strne	r3, [r4, #4]
 800844e:	6013      	streq	r3, [r2, #0]
 8008450:	460c      	movne	r4, r1
 8008452:	e7eb      	b.n	800842c <_malloc_r+0x64>
 8008454:	460c      	mov	r4, r1
 8008456:	6849      	ldr	r1, [r1, #4]
 8008458:	e7cc      	b.n	80083f4 <_malloc_r+0x2c>
 800845a:	1cc4      	adds	r4, r0, #3
 800845c:	f024 0403 	bic.w	r4, r4, #3
 8008460:	42a0      	cmp	r0, r4
 8008462:	d005      	beq.n	8008470 <_malloc_r+0xa8>
 8008464:	1a21      	subs	r1, r4, r0
 8008466:	4630      	mov	r0, r6
 8008468:	f000 f808 	bl	800847c <_sbrk_r>
 800846c:	3001      	adds	r0, #1
 800846e:	d0cf      	beq.n	8008410 <_malloc_r+0x48>
 8008470:	6025      	str	r5, [r4, #0]
 8008472:	e7db      	b.n	800842c <_malloc_r+0x64>
 8008474:	2000020c 	.word	0x2000020c
 8008478:	20000210 	.word	0x20000210

0800847c <_sbrk_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4c06      	ldr	r4, [pc, #24]	; (8008498 <_sbrk_r+0x1c>)
 8008480:	2300      	movs	r3, #0
 8008482:	4605      	mov	r5, r0
 8008484:	4608      	mov	r0, r1
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	f7f8 fefa 	bl	8001280 <_sbrk>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_sbrk_r+0x1a>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	b103      	cbz	r3, 8008496 <_sbrk_r+0x1a>
 8008494:	602b      	str	r3, [r5, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	20001c6c 	.word	0x20001c6c

0800849c <siprintf>:
 800849c:	b40e      	push	{r1, r2, r3}
 800849e:	b500      	push	{lr}
 80084a0:	b09c      	sub	sp, #112	; 0x70
 80084a2:	ab1d      	add	r3, sp, #116	; 0x74
 80084a4:	9002      	str	r0, [sp, #8]
 80084a6:	9006      	str	r0, [sp, #24]
 80084a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084ac:	4809      	ldr	r0, [pc, #36]	; (80084d4 <siprintf+0x38>)
 80084ae:	9107      	str	r1, [sp, #28]
 80084b0:	9104      	str	r1, [sp, #16]
 80084b2:	4909      	ldr	r1, [pc, #36]	; (80084d8 <siprintf+0x3c>)
 80084b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b8:	9105      	str	r1, [sp, #20]
 80084ba:	6800      	ldr	r0, [r0, #0]
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	a902      	add	r1, sp, #8
 80084c0:	f000 f868 	bl	8008594 <_svfiprintf_r>
 80084c4:	9b02      	ldr	r3, [sp, #8]
 80084c6:	2200      	movs	r2, #0
 80084c8:	701a      	strb	r2, [r3, #0]
 80084ca:	b01c      	add	sp, #112	; 0x70
 80084cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80084d0:	b003      	add	sp, #12
 80084d2:	4770      	bx	lr
 80084d4:	20000180 	.word	0x20000180
 80084d8:	ffff0208 	.word	0xffff0208

080084dc <__malloc_lock>:
 80084dc:	4770      	bx	lr

080084de <__malloc_unlock>:
 80084de:	4770      	bx	lr

080084e0 <__ssputs_r>:
 80084e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	688e      	ldr	r6, [r1, #8]
 80084e6:	429e      	cmp	r6, r3
 80084e8:	4682      	mov	sl, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	4690      	mov	r8, r2
 80084ee:	4699      	mov	r9, r3
 80084f0:	d837      	bhi.n	8008562 <__ssputs_r+0x82>
 80084f2:	898a      	ldrh	r2, [r1, #12]
 80084f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084f8:	d031      	beq.n	800855e <__ssputs_r+0x7e>
 80084fa:	6825      	ldr	r5, [r4, #0]
 80084fc:	6909      	ldr	r1, [r1, #16]
 80084fe:	1a6f      	subs	r7, r5, r1
 8008500:	6965      	ldr	r5, [r4, #20]
 8008502:	2302      	movs	r3, #2
 8008504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008508:	fb95 f5f3 	sdiv	r5, r5, r3
 800850c:	f109 0301 	add.w	r3, r9, #1
 8008510:	443b      	add	r3, r7
 8008512:	429d      	cmp	r5, r3
 8008514:	bf38      	it	cc
 8008516:	461d      	movcc	r5, r3
 8008518:	0553      	lsls	r3, r2, #21
 800851a:	d530      	bpl.n	800857e <__ssputs_r+0x9e>
 800851c:	4629      	mov	r1, r5
 800851e:	f7ff ff53 	bl	80083c8 <_malloc_r>
 8008522:	4606      	mov	r6, r0
 8008524:	b950      	cbnz	r0, 800853c <__ssputs_r+0x5c>
 8008526:	230c      	movs	r3, #12
 8008528:	f8ca 3000 	str.w	r3, [sl]
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	f04f 30ff 	mov.w	r0, #4294967295
 8008538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853c:	463a      	mov	r2, r7
 800853e:	6921      	ldr	r1, [r4, #16]
 8008540:	f7ff fee0 	bl	8008304 <memcpy>
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800854a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	6126      	str	r6, [r4, #16]
 8008552:	6165      	str	r5, [r4, #20]
 8008554:	443e      	add	r6, r7
 8008556:	1bed      	subs	r5, r5, r7
 8008558:	6026      	str	r6, [r4, #0]
 800855a:	60a5      	str	r5, [r4, #8]
 800855c:	464e      	mov	r6, r9
 800855e:	454e      	cmp	r6, r9
 8008560:	d900      	bls.n	8008564 <__ssputs_r+0x84>
 8008562:	464e      	mov	r6, r9
 8008564:	4632      	mov	r2, r6
 8008566:	4641      	mov	r1, r8
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	f000 fa93 	bl	8008a94 <memmove>
 800856e:	68a3      	ldr	r3, [r4, #8]
 8008570:	1b9b      	subs	r3, r3, r6
 8008572:	60a3      	str	r3, [r4, #8]
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	441e      	add	r6, r3
 8008578:	6026      	str	r6, [r4, #0]
 800857a:	2000      	movs	r0, #0
 800857c:	e7dc      	b.n	8008538 <__ssputs_r+0x58>
 800857e:	462a      	mov	r2, r5
 8008580:	f000 faa1 	bl	8008ac6 <_realloc_r>
 8008584:	4606      	mov	r6, r0
 8008586:	2800      	cmp	r0, #0
 8008588:	d1e2      	bne.n	8008550 <__ssputs_r+0x70>
 800858a:	6921      	ldr	r1, [r4, #16]
 800858c:	4650      	mov	r0, sl
 800858e:	f7ff fecd 	bl	800832c <_free_r>
 8008592:	e7c8      	b.n	8008526 <__ssputs_r+0x46>

08008594 <_svfiprintf_r>:
 8008594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008598:	461d      	mov	r5, r3
 800859a:	898b      	ldrh	r3, [r1, #12]
 800859c:	061f      	lsls	r7, r3, #24
 800859e:	b09d      	sub	sp, #116	; 0x74
 80085a0:	4680      	mov	r8, r0
 80085a2:	460c      	mov	r4, r1
 80085a4:	4616      	mov	r6, r2
 80085a6:	d50f      	bpl.n	80085c8 <_svfiprintf_r+0x34>
 80085a8:	690b      	ldr	r3, [r1, #16]
 80085aa:	b96b      	cbnz	r3, 80085c8 <_svfiprintf_r+0x34>
 80085ac:	2140      	movs	r1, #64	; 0x40
 80085ae:	f7ff ff0b 	bl	80083c8 <_malloc_r>
 80085b2:	6020      	str	r0, [r4, #0]
 80085b4:	6120      	str	r0, [r4, #16]
 80085b6:	b928      	cbnz	r0, 80085c4 <_svfiprintf_r+0x30>
 80085b8:	230c      	movs	r3, #12
 80085ba:	f8c8 3000 	str.w	r3, [r8]
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	e0c8      	b.n	8008756 <_svfiprintf_r+0x1c2>
 80085c4:	2340      	movs	r3, #64	; 0x40
 80085c6:	6163      	str	r3, [r4, #20]
 80085c8:	2300      	movs	r3, #0
 80085ca:	9309      	str	r3, [sp, #36]	; 0x24
 80085cc:	2320      	movs	r3, #32
 80085ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085d2:	2330      	movs	r3, #48	; 0x30
 80085d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085d8:	9503      	str	r5, [sp, #12]
 80085da:	f04f 0b01 	mov.w	fp, #1
 80085de:	4637      	mov	r7, r6
 80085e0:	463d      	mov	r5, r7
 80085e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80085e6:	b10b      	cbz	r3, 80085ec <_svfiprintf_r+0x58>
 80085e8:	2b25      	cmp	r3, #37	; 0x25
 80085ea:	d13e      	bne.n	800866a <_svfiprintf_r+0xd6>
 80085ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80085f0:	d00b      	beq.n	800860a <_svfiprintf_r+0x76>
 80085f2:	4653      	mov	r3, sl
 80085f4:	4632      	mov	r2, r6
 80085f6:	4621      	mov	r1, r4
 80085f8:	4640      	mov	r0, r8
 80085fa:	f7ff ff71 	bl	80084e0 <__ssputs_r>
 80085fe:	3001      	adds	r0, #1
 8008600:	f000 80a4 	beq.w	800874c <_svfiprintf_r+0x1b8>
 8008604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008606:	4453      	add	r3, sl
 8008608:	9309      	str	r3, [sp, #36]	; 0x24
 800860a:	783b      	ldrb	r3, [r7, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 809d 	beq.w	800874c <_svfiprintf_r+0x1b8>
 8008612:	2300      	movs	r3, #0
 8008614:	f04f 32ff 	mov.w	r2, #4294967295
 8008618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800861c:	9304      	str	r3, [sp, #16]
 800861e:	9307      	str	r3, [sp, #28]
 8008620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008624:	931a      	str	r3, [sp, #104]	; 0x68
 8008626:	462f      	mov	r7, r5
 8008628:	2205      	movs	r2, #5
 800862a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800862e:	4850      	ldr	r0, [pc, #320]	; (8008770 <_svfiprintf_r+0x1dc>)
 8008630:	f7f7 fdde 	bl	80001f0 <memchr>
 8008634:	9b04      	ldr	r3, [sp, #16]
 8008636:	b9d0      	cbnz	r0, 800866e <_svfiprintf_r+0xda>
 8008638:	06d9      	lsls	r1, r3, #27
 800863a:	bf44      	itt	mi
 800863c:	2220      	movmi	r2, #32
 800863e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008642:	071a      	lsls	r2, r3, #28
 8008644:	bf44      	itt	mi
 8008646:	222b      	movmi	r2, #43	; 0x2b
 8008648:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800864c:	782a      	ldrb	r2, [r5, #0]
 800864e:	2a2a      	cmp	r2, #42	; 0x2a
 8008650:	d015      	beq.n	800867e <_svfiprintf_r+0xea>
 8008652:	9a07      	ldr	r2, [sp, #28]
 8008654:	462f      	mov	r7, r5
 8008656:	2000      	movs	r0, #0
 8008658:	250a      	movs	r5, #10
 800865a:	4639      	mov	r1, r7
 800865c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008660:	3b30      	subs	r3, #48	; 0x30
 8008662:	2b09      	cmp	r3, #9
 8008664:	d94d      	bls.n	8008702 <_svfiprintf_r+0x16e>
 8008666:	b1b8      	cbz	r0, 8008698 <_svfiprintf_r+0x104>
 8008668:	e00f      	b.n	800868a <_svfiprintf_r+0xf6>
 800866a:	462f      	mov	r7, r5
 800866c:	e7b8      	b.n	80085e0 <_svfiprintf_r+0x4c>
 800866e:	4a40      	ldr	r2, [pc, #256]	; (8008770 <_svfiprintf_r+0x1dc>)
 8008670:	1a80      	subs	r0, r0, r2
 8008672:	fa0b f000 	lsl.w	r0, fp, r0
 8008676:	4318      	orrs	r0, r3
 8008678:	9004      	str	r0, [sp, #16]
 800867a:	463d      	mov	r5, r7
 800867c:	e7d3      	b.n	8008626 <_svfiprintf_r+0x92>
 800867e:	9a03      	ldr	r2, [sp, #12]
 8008680:	1d11      	adds	r1, r2, #4
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	9103      	str	r1, [sp, #12]
 8008686:	2a00      	cmp	r2, #0
 8008688:	db01      	blt.n	800868e <_svfiprintf_r+0xfa>
 800868a:	9207      	str	r2, [sp, #28]
 800868c:	e004      	b.n	8008698 <_svfiprintf_r+0x104>
 800868e:	4252      	negs	r2, r2
 8008690:	f043 0302 	orr.w	r3, r3, #2
 8008694:	9207      	str	r2, [sp, #28]
 8008696:	9304      	str	r3, [sp, #16]
 8008698:	783b      	ldrb	r3, [r7, #0]
 800869a:	2b2e      	cmp	r3, #46	; 0x2e
 800869c:	d10c      	bne.n	80086b8 <_svfiprintf_r+0x124>
 800869e:	787b      	ldrb	r3, [r7, #1]
 80086a0:	2b2a      	cmp	r3, #42	; 0x2a
 80086a2:	d133      	bne.n	800870c <_svfiprintf_r+0x178>
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	1d1a      	adds	r2, r3, #4
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	9203      	str	r2, [sp, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bfb8      	it	lt
 80086b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80086b4:	3702      	adds	r7, #2
 80086b6:	9305      	str	r3, [sp, #20]
 80086b8:	4d2e      	ldr	r5, [pc, #184]	; (8008774 <_svfiprintf_r+0x1e0>)
 80086ba:	7839      	ldrb	r1, [r7, #0]
 80086bc:	2203      	movs	r2, #3
 80086be:	4628      	mov	r0, r5
 80086c0:	f7f7 fd96 	bl	80001f0 <memchr>
 80086c4:	b138      	cbz	r0, 80086d6 <_svfiprintf_r+0x142>
 80086c6:	2340      	movs	r3, #64	; 0x40
 80086c8:	1b40      	subs	r0, r0, r5
 80086ca:	fa03 f000 	lsl.w	r0, r3, r0
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	4303      	orrs	r3, r0
 80086d2:	3701      	adds	r7, #1
 80086d4:	9304      	str	r3, [sp, #16]
 80086d6:	7839      	ldrb	r1, [r7, #0]
 80086d8:	4827      	ldr	r0, [pc, #156]	; (8008778 <_svfiprintf_r+0x1e4>)
 80086da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086de:	2206      	movs	r2, #6
 80086e0:	1c7e      	adds	r6, r7, #1
 80086e2:	f7f7 fd85 	bl	80001f0 <memchr>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d038      	beq.n	800875c <_svfiprintf_r+0x1c8>
 80086ea:	4b24      	ldr	r3, [pc, #144]	; (800877c <_svfiprintf_r+0x1e8>)
 80086ec:	bb13      	cbnz	r3, 8008734 <_svfiprintf_r+0x1a0>
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	3307      	adds	r3, #7
 80086f2:	f023 0307 	bic.w	r3, r3, #7
 80086f6:	3308      	adds	r3, #8
 80086f8:	9303      	str	r3, [sp, #12]
 80086fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fc:	444b      	add	r3, r9
 80086fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008700:	e76d      	b.n	80085de <_svfiprintf_r+0x4a>
 8008702:	fb05 3202 	mla	r2, r5, r2, r3
 8008706:	2001      	movs	r0, #1
 8008708:	460f      	mov	r7, r1
 800870a:	e7a6      	b.n	800865a <_svfiprintf_r+0xc6>
 800870c:	2300      	movs	r3, #0
 800870e:	3701      	adds	r7, #1
 8008710:	9305      	str	r3, [sp, #20]
 8008712:	4619      	mov	r1, r3
 8008714:	250a      	movs	r5, #10
 8008716:	4638      	mov	r0, r7
 8008718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800871c:	3a30      	subs	r2, #48	; 0x30
 800871e:	2a09      	cmp	r2, #9
 8008720:	d903      	bls.n	800872a <_svfiprintf_r+0x196>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0c8      	beq.n	80086b8 <_svfiprintf_r+0x124>
 8008726:	9105      	str	r1, [sp, #20]
 8008728:	e7c6      	b.n	80086b8 <_svfiprintf_r+0x124>
 800872a:	fb05 2101 	mla	r1, r5, r1, r2
 800872e:	2301      	movs	r3, #1
 8008730:	4607      	mov	r7, r0
 8008732:	e7f0      	b.n	8008716 <_svfiprintf_r+0x182>
 8008734:	ab03      	add	r3, sp, #12
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4622      	mov	r2, r4
 800873a:	4b11      	ldr	r3, [pc, #68]	; (8008780 <_svfiprintf_r+0x1ec>)
 800873c:	a904      	add	r1, sp, #16
 800873e:	4640      	mov	r0, r8
 8008740:	f3af 8000 	nop.w
 8008744:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008748:	4681      	mov	r9, r0
 800874a:	d1d6      	bne.n	80086fa <_svfiprintf_r+0x166>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	065b      	lsls	r3, r3, #25
 8008750:	f53f af35 	bmi.w	80085be <_svfiprintf_r+0x2a>
 8008754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008756:	b01d      	add	sp, #116	; 0x74
 8008758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875c:	ab03      	add	r3, sp, #12
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	4622      	mov	r2, r4
 8008762:	4b07      	ldr	r3, [pc, #28]	; (8008780 <_svfiprintf_r+0x1ec>)
 8008764:	a904      	add	r1, sp, #16
 8008766:	4640      	mov	r0, r8
 8008768:	f000 f882 	bl	8008870 <_printf_i>
 800876c:	e7ea      	b.n	8008744 <_svfiprintf_r+0x1b0>
 800876e:	bf00      	nop
 8008770:	08008d08 	.word	0x08008d08
 8008774:	08008d0e 	.word	0x08008d0e
 8008778:	08008d12 	.word	0x08008d12
 800877c:	00000000 	.word	0x00000000
 8008780:	080084e1 	.word	0x080084e1

08008784 <_printf_common>:
 8008784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	4691      	mov	r9, r2
 800878a:	461f      	mov	r7, r3
 800878c:	688a      	ldr	r2, [r1, #8]
 800878e:	690b      	ldr	r3, [r1, #16]
 8008790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008794:	4293      	cmp	r3, r2
 8008796:	bfb8      	it	lt
 8008798:	4613      	movlt	r3, r2
 800879a:	f8c9 3000 	str.w	r3, [r9]
 800879e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087a2:	4606      	mov	r6, r0
 80087a4:	460c      	mov	r4, r1
 80087a6:	b112      	cbz	r2, 80087ae <_printf_common+0x2a>
 80087a8:	3301      	adds	r3, #1
 80087aa:	f8c9 3000 	str.w	r3, [r9]
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	0699      	lsls	r1, r3, #26
 80087b2:	bf42      	ittt	mi
 80087b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80087b8:	3302      	addmi	r3, #2
 80087ba:	f8c9 3000 	strmi.w	r3, [r9]
 80087be:	6825      	ldr	r5, [r4, #0]
 80087c0:	f015 0506 	ands.w	r5, r5, #6
 80087c4:	d107      	bne.n	80087d6 <_printf_common+0x52>
 80087c6:	f104 0a19 	add.w	sl, r4, #25
 80087ca:	68e3      	ldr	r3, [r4, #12]
 80087cc:	f8d9 2000 	ldr.w	r2, [r9]
 80087d0:	1a9b      	subs	r3, r3, r2
 80087d2:	42ab      	cmp	r3, r5
 80087d4:	dc28      	bgt.n	8008828 <_printf_common+0xa4>
 80087d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80087da:	6822      	ldr	r2, [r4, #0]
 80087dc:	3300      	adds	r3, #0
 80087de:	bf18      	it	ne
 80087e0:	2301      	movne	r3, #1
 80087e2:	0692      	lsls	r2, r2, #26
 80087e4:	d42d      	bmi.n	8008842 <_printf_common+0xbe>
 80087e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087ea:	4639      	mov	r1, r7
 80087ec:	4630      	mov	r0, r6
 80087ee:	47c0      	blx	r8
 80087f0:	3001      	adds	r0, #1
 80087f2:	d020      	beq.n	8008836 <_printf_common+0xb2>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	68e5      	ldr	r5, [r4, #12]
 80087f8:	f8d9 2000 	ldr.w	r2, [r9]
 80087fc:	f003 0306 	and.w	r3, r3, #6
 8008800:	2b04      	cmp	r3, #4
 8008802:	bf08      	it	eq
 8008804:	1aad      	subeq	r5, r5, r2
 8008806:	68a3      	ldr	r3, [r4, #8]
 8008808:	6922      	ldr	r2, [r4, #16]
 800880a:	bf0c      	ite	eq
 800880c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008810:	2500      	movne	r5, #0
 8008812:	4293      	cmp	r3, r2
 8008814:	bfc4      	itt	gt
 8008816:	1a9b      	subgt	r3, r3, r2
 8008818:	18ed      	addgt	r5, r5, r3
 800881a:	f04f 0900 	mov.w	r9, #0
 800881e:	341a      	adds	r4, #26
 8008820:	454d      	cmp	r5, r9
 8008822:	d11a      	bne.n	800885a <_printf_common+0xd6>
 8008824:	2000      	movs	r0, #0
 8008826:	e008      	b.n	800883a <_printf_common+0xb6>
 8008828:	2301      	movs	r3, #1
 800882a:	4652      	mov	r2, sl
 800882c:	4639      	mov	r1, r7
 800882e:	4630      	mov	r0, r6
 8008830:	47c0      	blx	r8
 8008832:	3001      	adds	r0, #1
 8008834:	d103      	bne.n	800883e <_printf_common+0xba>
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800883e:	3501      	adds	r5, #1
 8008840:	e7c3      	b.n	80087ca <_printf_common+0x46>
 8008842:	18e1      	adds	r1, r4, r3
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	2030      	movs	r0, #48	; 0x30
 8008848:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800884c:	4422      	add	r2, r4
 800884e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008852:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008856:	3302      	adds	r3, #2
 8008858:	e7c5      	b.n	80087e6 <_printf_common+0x62>
 800885a:	2301      	movs	r3, #1
 800885c:	4622      	mov	r2, r4
 800885e:	4639      	mov	r1, r7
 8008860:	4630      	mov	r0, r6
 8008862:	47c0      	blx	r8
 8008864:	3001      	adds	r0, #1
 8008866:	d0e6      	beq.n	8008836 <_printf_common+0xb2>
 8008868:	f109 0901 	add.w	r9, r9, #1
 800886c:	e7d8      	b.n	8008820 <_printf_common+0x9c>
	...

08008870 <_printf_i>:
 8008870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008874:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008878:	460c      	mov	r4, r1
 800887a:	7e09      	ldrb	r1, [r1, #24]
 800887c:	b085      	sub	sp, #20
 800887e:	296e      	cmp	r1, #110	; 0x6e
 8008880:	4617      	mov	r7, r2
 8008882:	4606      	mov	r6, r0
 8008884:	4698      	mov	r8, r3
 8008886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008888:	f000 80b3 	beq.w	80089f2 <_printf_i+0x182>
 800888c:	d822      	bhi.n	80088d4 <_printf_i+0x64>
 800888e:	2963      	cmp	r1, #99	; 0x63
 8008890:	d036      	beq.n	8008900 <_printf_i+0x90>
 8008892:	d80a      	bhi.n	80088aa <_printf_i+0x3a>
 8008894:	2900      	cmp	r1, #0
 8008896:	f000 80b9 	beq.w	8008a0c <_printf_i+0x19c>
 800889a:	2958      	cmp	r1, #88	; 0x58
 800889c:	f000 8083 	beq.w	80089a6 <_printf_i+0x136>
 80088a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80088a8:	e032      	b.n	8008910 <_printf_i+0xa0>
 80088aa:	2964      	cmp	r1, #100	; 0x64
 80088ac:	d001      	beq.n	80088b2 <_printf_i+0x42>
 80088ae:	2969      	cmp	r1, #105	; 0x69
 80088b0:	d1f6      	bne.n	80088a0 <_printf_i+0x30>
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	6813      	ldr	r3, [r2, #0]
 80088b6:	0605      	lsls	r5, r0, #24
 80088b8:	f103 0104 	add.w	r1, r3, #4
 80088bc:	d52a      	bpl.n	8008914 <_printf_i+0xa4>
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6011      	str	r1, [r2, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	da03      	bge.n	80088ce <_printf_i+0x5e>
 80088c6:	222d      	movs	r2, #45	; 0x2d
 80088c8:	425b      	negs	r3, r3
 80088ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80088ce:	486f      	ldr	r0, [pc, #444]	; (8008a8c <_printf_i+0x21c>)
 80088d0:	220a      	movs	r2, #10
 80088d2:	e039      	b.n	8008948 <_printf_i+0xd8>
 80088d4:	2973      	cmp	r1, #115	; 0x73
 80088d6:	f000 809d 	beq.w	8008a14 <_printf_i+0x1a4>
 80088da:	d808      	bhi.n	80088ee <_printf_i+0x7e>
 80088dc:	296f      	cmp	r1, #111	; 0x6f
 80088de:	d020      	beq.n	8008922 <_printf_i+0xb2>
 80088e0:	2970      	cmp	r1, #112	; 0x70
 80088e2:	d1dd      	bne.n	80088a0 <_printf_i+0x30>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	f043 0320 	orr.w	r3, r3, #32
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	e003      	b.n	80088f6 <_printf_i+0x86>
 80088ee:	2975      	cmp	r1, #117	; 0x75
 80088f0:	d017      	beq.n	8008922 <_printf_i+0xb2>
 80088f2:	2978      	cmp	r1, #120	; 0x78
 80088f4:	d1d4      	bne.n	80088a0 <_printf_i+0x30>
 80088f6:	2378      	movs	r3, #120	; 0x78
 80088f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088fc:	4864      	ldr	r0, [pc, #400]	; (8008a90 <_printf_i+0x220>)
 80088fe:	e055      	b.n	80089ac <_printf_i+0x13c>
 8008900:	6813      	ldr	r3, [r2, #0]
 8008902:	1d19      	adds	r1, r3, #4
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6011      	str	r1, [r2, #0]
 8008908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800890c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008910:	2301      	movs	r3, #1
 8008912:	e08c      	b.n	8008a2e <_printf_i+0x1be>
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6011      	str	r1, [r2, #0]
 8008918:	f010 0f40 	tst.w	r0, #64	; 0x40
 800891c:	bf18      	it	ne
 800891e:	b21b      	sxthne	r3, r3
 8008920:	e7cf      	b.n	80088c2 <_printf_i+0x52>
 8008922:	6813      	ldr	r3, [r2, #0]
 8008924:	6825      	ldr	r5, [r4, #0]
 8008926:	1d18      	adds	r0, r3, #4
 8008928:	6010      	str	r0, [r2, #0]
 800892a:	0628      	lsls	r0, r5, #24
 800892c:	d501      	bpl.n	8008932 <_printf_i+0xc2>
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	e002      	b.n	8008938 <_printf_i+0xc8>
 8008932:	0668      	lsls	r0, r5, #25
 8008934:	d5fb      	bpl.n	800892e <_printf_i+0xbe>
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	4854      	ldr	r0, [pc, #336]	; (8008a8c <_printf_i+0x21c>)
 800893a:	296f      	cmp	r1, #111	; 0x6f
 800893c:	bf14      	ite	ne
 800893e:	220a      	movne	r2, #10
 8008940:	2208      	moveq	r2, #8
 8008942:	2100      	movs	r1, #0
 8008944:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008948:	6865      	ldr	r5, [r4, #4]
 800894a:	60a5      	str	r5, [r4, #8]
 800894c:	2d00      	cmp	r5, #0
 800894e:	f2c0 8095 	blt.w	8008a7c <_printf_i+0x20c>
 8008952:	6821      	ldr	r1, [r4, #0]
 8008954:	f021 0104 	bic.w	r1, r1, #4
 8008958:	6021      	str	r1, [r4, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d13d      	bne.n	80089da <_printf_i+0x16a>
 800895e:	2d00      	cmp	r5, #0
 8008960:	f040 808e 	bne.w	8008a80 <_printf_i+0x210>
 8008964:	4665      	mov	r5, ip
 8008966:	2a08      	cmp	r2, #8
 8008968:	d10b      	bne.n	8008982 <_printf_i+0x112>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	07db      	lsls	r3, r3, #31
 800896e:	d508      	bpl.n	8008982 <_printf_i+0x112>
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	6862      	ldr	r2, [r4, #4]
 8008974:	429a      	cmp	r2, r3
 8008976:	bfde      	ittt	le
 8008978:	2330      	movle	r3, #48	; 0x30
 800897a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800897e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008982:	ebac 0305 	sub.w	r3, ip, r5
 8008986:	6123      	str	r3, [r4, #16]
 8008988:	f8cd 8000 	str.w	r8, [sp]
 800898c:	463b      	mov	r3, r7
 800898e:	aa03      	add	r2, sp, #12
 8008990:	4621      	mov	r1, r4
 8008992:	4630      	mov	r0, r6
 8008994:	f7ff fef6 	bl	8008784 <_printf_common>
 8008998:	3001      	adds	r0, #1
 800899a:	d14d      	bne.n	8008a38 <_printf_i+0x1c8>
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	b005      	add	sp, #20
 80089a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089a6:	4839      	ldr	r0, [pc, #228]	; (8008a8c <_printf_i+0x21c>)
 80089a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80089ac:	6813      	ldr	r3, [r2, #0]
 80089ae:	6821      	ldr	r1, [r4, #0]
 80089b0:	1d1d      	adds	r5, r3, #4
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6015      	str	r5, [r2, #0]
 80089b6:	060a      	lsls	r2, r1, #24
 80089b8:	d50b      	bpl.n	80089d2 <_printf_i+0x162>
 80089ba:	07ca      	lsls	r2, r1, #31
 80089bc:	bf44      	itt	mi
 80089be:	f041 0120 	orrmi.w	r1, r1, #32
 80089c2:	6021      	strmi	r1, [r4, #0]
 80089c4:	b91b      	cbnz	r3, 80089ce <_printf_i+0x15e>
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	f022 0220 	bic.w	r2, r2, #32
 80089cc:	6022      	str	r2, [r4, #0]
 80089ce:	2210      	movs	r2, #16
 80089d0:	e7b7      	b.n	8008942 <_printf_i+0xd2>
 80089d2:	064d      	lsls	r5, r1, #25
 80089d4:	bf48      	it	mi
 80089d6:	b29b      	uxthmi	r3, r3
 80089d8:	e7ef      	b.n	80089ba <_printf_i+0x14a>
 80089da:	4665      	mov	r5, ip
 80089dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80089e0:	fb02 3311 	mls	r3, r2, r1, r3
 80089e4:	5cc3      	ldrb	r3, [r0, r3]
 80089e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80089ea:	460b      	mov	r3, r1
 80089ec:	2900      	cmp	r1, #0
 80089ee:	d1f5      	bne.n	80089dc <_printf_i+0x16c>
 80089f0:	e7b9      	b.n	8008966 <_printf_i+0xf6>
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	6825      	ldr	r5, [r4, #0]
 80089f6:	6961      	ldr	r1, [r4, #20]
 80089f8:	1d18      	adds	r0, r3, #4
 80089fa:	6010      	str	r0, [r2, #0]
 80089fc:	0628      	lsls	r0, r5, #24
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	d501      	bpl.n	8008a06 <_printf_i+0x196>
 8008a02:	6019      	str	r1, [r3, #0]
 8008a04:	e002      	b.n	8008a0c <_printf_i+0x19c>
 8008a06:	066a      	lsls	r2, r5, #25
 8008a08:	d5fb      	bpl.n	8008a02 <_printf_i+0x192>
 8008a0a:	8019      	strh	r1, [r3, #0]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	6123      	str	r3, [r4, #16]
 8008a10:	4665      	mov	r5, ip
 8008a12:	e7b9      	b.n	8008988 <_printf_i+0x118>
 8008a14:	6813      	ldr	r3, [r2, #0]
 8008a16:	1d19      	adds	r1, r3, #4
 8008a18:	6011      	str	r1, [r2, #0]
 8008a1a:	681d      	ldr	r5, [r3, #0]
 8008a1c:	6862      	ldr	r2, [r4, #4]
 8008a1e:	2100      	movs	r1, #0
 8008a20:	4628      	mov	r0, r5
 8008a22:	f7f7 fbe5 	bl	80001f0 <memchr>
 8008a26:	b108      	cbz	r0, 8008a2c <_printf_i+0x1bc>
 8008a28:	1b40      	subs	r0, r0, r5
 8008a2a:	6060      	str	r0, [r4, #4]
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	6123      	str	r3, [r4, #16]
 8008a30:	2300      	movs	r3, #0
 8008a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a36:	e7a7      	b.n	8008988 <_printf_i+0x118>
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	462a      	mov	r2, r5
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	4630      	mov	r0, r6
 8008a40:	47c0      	blx	r8
 8008a42:	3001      	adds	r0, #1
 8008a44:	d0aa      	beq.n	800899c <_printf_i+0x12c>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	079b      	lsls	r3, r3, #30
 8008a4a:	d413      	bmi.n	8008a74 <_printf_i+0x204>
 8008a4c:	68e0      	ldr	r0, [r4, #12]
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	4298      	cmp	r0, r3
 8008a52:	bfb8      	it	lt
 8008a54:	4618      	movlt	r0, r3
 8008a56:	e7a3      	b.n	80089a0 <_printf_i+0x130>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	464a      	mov	r2, r9
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	4630      	mov	r0, r6
 8008a60:	47c0      	blx	r8
 8008a62:	3001      	adds	r0, #1
 8008a64:	d09a      	beq.n	800899c <_printf_i+0x12c>
 8008a66:	3501      	adds	r5, #1
 8008a68:	68e3      	ldr	r3, [r4, #12]
 8008a6a:	9a03      	ldr	r2, [sp, #12]
 8008a6c:	1a9b      	subs	r3, r3, r2
 8008a6e:	42ab      	cmp	r3, r5
 8008a70:	dcf2      	bgt.n	8008a58 <_printf_i+0x1e8>
 8008a72:	e7eb      	b.n	8008a4c <_printf_i+0x1dc>
 8008a74:	2500      	movs	r5, #0
 8008a76:	f104 0919 	add.w	r9, r4, #25
 8008a7a:	e7f5      	b.n	8008a68 <_printf_i+0x1f8>
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1ac      	bne.n	80089da <_printf_i+0x16a>
 8008a80:	7803      	ldrb	r3, [r0, #0]
 8008a82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a8a:	e76c      	b.n	8008966 <_printf_i+0xf6>
 8008a8c:	08008d19 	.word	0x08008d19
 8008a90:	08008d2a 	.word	0x08008d2a

08008a94 <memmove>:
 8008a94:	4288      	cmp	r0, r1
 8008a96:	b510      	push	{r4, lr}
 8008a98:	eb01 0302 	add.w	r3, r1, r2
 8008a9c:	d807      	bhi.n	8008aae <memmove+0x1a>
 8008a9e:	1e42      	subs	r2, r0, #1
 8008aa0:	4299      	cmp	r1, r3
 8008aa2:	d00a      	beq.n	8008aba <memmove+0x26>
 8008aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aa8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008aac:	e7f8      	b.n	8008aa0 <memmove+0xc>
 8008aae:	4283      	cmp	r3, r0
 8008ab0:	d9f5      	bls.n	8008a9e <memmove+0xa>
 8008ab2:	1881      	adds	r1, r0, r2
 8008ab4:	1ad2      	subs	r2, r2, r3
 8008ab6:	42d3      	cmn	r3, r2
 8008ab8:	d100      	bne.n	8008abc <memmove+0x28>
 8008aba:	bd10      	pop	{r4, pc}
 8008abc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ac0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008ac4:	e7f7      	b.n	8008ab6 <memmove+0x22>

08008ac6 <_realloc_r>:
 8008ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac8:	4607      	mov	r7, r0
 8008aca:	4614      	mov	r4, r2
 8008acc:	460e      	mov	r6, r1
 8008ace:	b921      	cbnz	r1, 8008ada <_realloc_r+0x14>
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ad6:	f7ff bc77 	b.w	80083c8 <_malloc_r>
 8008ada:	b922      	cbnz	r2, 8008ae6 <_realloc_r+0x20>
 8008adc:	f7ff fc26 	bl	800832c <_free_r>
 8008ae0:	4625      	mov	r5, r4
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae6:	f000 f814 	bl	8008b12 <_malloc_usable_size_r>
 8008aea:	42a0      	cmp	r0, r4
 8008aec:	d20f      	bcs.n	8008b0e <_realloc_r+0x48>
 8008aee:	4621      	mov	r1, r4
 8008af0:	4638      	mov	r0, r7
 8008af2:	f7ff fc69 	bl	80083c8 <_malloc_r>
 8008af6:	4605      	mov	r5, r0
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d0f2      	beq.n	8008ae2 <_realloc_r+0x1c>
 8008afc:	4631      	mov	r1, r6
 8008afe:	4622      	mov	r2, r4
 8008b00:	f7ff fc00 	bl	8008304 <memcpy>
 8008b04:	4631      	mov	r1, r6
 8008b06:	4638      	mov	r0, r7
 8008b08:	f7ff fc10 	bl	800832c <_free_r>
 8008b0c:	e7e9      	b.n	8008ae2 <_realloc_r+0x1c>
 8008b0e:	4635      	mov	r5, r6
 8008b10:	e7e7      	b.n	8008ae2 <_realloc_r+0x1c>

08008b12 <_malloc_usable_size_r>:
 8008b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b16:	1f18      	subs	r0, r3, #4
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	bfbc      	itt	lt
 8008b1c:	580b      	ldrlt	r3, [r1, r0]
 8008b1e:	18c0      	addlt	r0, r0, r3
 8008b20:	4770      	bx	lr
	...

08008b24 <_init>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	bf00      	nop
 8008b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b2a:	bc08      	pop	{r3}
 8008b2c:	469e      	mov	lr, r3
 8008b2e:	4770      	bx	lr

08008b30 <_fini>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	bf00      	nop
 8008b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b36:	bc08      	pop	{r3}
 8008b38:	469e      	mov	lr, r3
 8008b3a:	4770      	bx	lr
